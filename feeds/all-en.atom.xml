<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>SignalShore</title><link href="https://signalshore.github.io/" rel="alternate"></link><link href="https://signalshore.github.io/feeds/all-en.atom.xml" rel="self"></link><id>https://signalshore.github.io/</id><updated>2018-11-07T00:00:00+05:30</updated><entry><title>Undecidability and Incompleteness</title><link href="https://signalshore.github.io/blog/Undecideablity-And-Incompleteness.html" rel="alternate"></link><published>2018-11-07T00:00:00+05:30</published><updated>2018-11-07T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-11-07:/blog/Undecideablity-And-Incompleteness.html</id><summary type="html">&lt;p&gt;In the &lt;a href="https://signalshore.github.io/blog/Turing-Machine-and-Halting-Problem.html"&gt;previous post&lt;/a&gt;
we looked at a Turing Machine and the Halting problem.  A Halting
problems is type of decision problem for a Turing Machine.&lt;/p&gt;
&lt;p&gt;Recall that a Turing Machine has three final states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept -&amp;gt; The machine accepts the string&lt;/li&gt;
&lt;li&gt;Reject -&amp;gt; The machine rejects the string&lt;/li&gt;
&lt;li&gt;Loop indefinitely -&amp;gt; The …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;In the &lt;a href="https://signalshore.github.io/blog/Turing-Machine-and-Halting-Problem.html"&gt;previous post&lt;/a&gt;
we looked at a Turing Machine and the Halting problem.  A Halting
problems is type of decision problem for a Turing Machine.&lt;/p&gt;
&lt;p&gt;Recall that a Turing Machine has three final states:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Accept -&amp;gt; The machine accepts the string&lt;/li&gt;
&lt;li&gt;Reject -&amp;gt; The machine rejects the string&lt;/li&gt;
&lt;li&gt;Loop indefinitely -&amp;gt; The machine neither accepts nor rejects the string; its still processing it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now it is quite evident that in the Accept and Reject states the
Turing Machine can tell you something definite about the string that
it is processing. Thus, when a Turing Machine reaches one of these
states we say that the Turing Machine has &lt;em&gt;decided&lt;/em&gt; the language
(recall that all TM problems are represented in the form of Languages). &lt;/p&gt;
&lt;p&gt;On the other hand we have situations where the Turing Machine fails to
decide a language. In fact we have a whole class of such
languages. These languages are called undecidable languages.&lt;/p&gt;
&lt;p&gt;The Halting Problem that we looked at in the last essay is one such problem.&lt;/p&gt;
&lt;h2&gt;Undecidability and Undecidable Problems&lt;/h2&gt;
&lt;p&gt;Undecidability is one of those concepts in Theoretical Computer
Science that fascinates me in ways I can not even begin explain. &lt;/p&gt;
&lt;p&gt;There are certain types of decision-problems for which there is no
algorithm that can reliably give a yes-no answer.&lt;/p&gt;
&lt;p&gt;The implications of this are quite interesting. &lt;/p&gt;
&lt;p&gt;This means that you can not have a program that tells you whether a
program will produce an output or not (and consequently keep running
for-ever). Like how our compilers still can not tell us when we will hit
an infinite-loop. The only way to find out is to actually run the
program. This is serious research topic in computer science; designing
accurate static analyzers.&lt;/p&gt;
&lt;h2&gt;Hilbert's problems&lt;/h2&gt;
&lt;p&gt;In 1900 mathematician David Hilbert published a list of 23
problems. In 1928 he returned to the second question out of these 23
asking three fundamental questions about mathematics.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is mathematics complete ?&lt;/li&gt;
&lt;li&gt;Is mathematics consistent ?&lt;/li&gt;
&lt;li&gt;Is mathematics decidable ?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The main reason for these questions was to establish a set of
&lt;em&gt;fundamental&lt;/em&gt; axioms about mathematics using which you could prove any
theorem in mathematics. Now, the idea was that even if all of such
axioms were not known we could find them out.&lt;/p&gt;
&lt;p&gt;Three years later in 1931 Kurt Godel published solutions to the first
two questions, these are known as Godel's incompleteness theorems.&lt;/p&gt;
&lt;p&gt;The Wikipedia page
for
&lt;a href="https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems"&gt;Godel's incompleteness theorem&lt;/a&gt; states
that&lt;/p&gt;
&lt;p&gt;The first incompleteness theorem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;no consistent system
of axioms whose theorems can be listed by an effective procedure
(i.e., an algorithm) is capable of proving all truths about the
arithmetic of the natural numbers. For any such formal system, there
will always be statements about the natural numbers that are true, but
that are unprovable within the system.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The second incompleteness theorem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;the system in question cannot demonstrate its own consistency.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;All this is fine; but what does it actually mean for mathematics and computer science ?&lt;/p&gt;
&lt;p&gt;For mathematics it means that mathematics is not complete. Hence there
is a very good possibility that certain problems exist in mathematics
which can never be proven. (For
example. the
&lt;a href="https://en.wikipedia.org/wiki/Riemann_hypothesis"&gt;Riemann hypothesis&lt;/a&gt;
etc)&lt;/p&gt;
&lt;p&gt;For Computer Science this means that there are certain programs that
are non-computable.  Yes, this basically puts a limit on the type of
programs that you can write.&lt;/p&gt;
&lt;h2&gt;Entscheidungsproblem (or the Decision problem)&lt;/h2&gt;
&lt;p&gt;This problem is referred to as
the
&lt;a href="https://en.wikipedia.org/wiki/Entscheidungsproblem"&gt;Decision problem&lt;/a&gt;
posed by David Hilbert. This problem asks for an algorithm that takes
in a logical statement statement and then says either "yes" or "no" as
to whether the statement is true or not. For the sake of simplicity
we can assume that the algorithm is aware of all the axioms (or rules)
that is needed to say "yes" or "no".&lt;/p&gt;
&lt;p&gt;The solution of this problem was given by both Alan Turing and Alonzo
Church in 1936. Alonzo Church created a method of defining functions
called the Lambda Calculus while Alan Turing created a model of
computation called the Turing Machine.&lt;/p&gt;
&lt;p&gt;The final result was the no such algorithm can exist. &lt;/p&gt;
&lt;p&gt;What does this mean for mathematics and computer science ?&lt;/p&gt;
&lt;p&gt;For mathematics it means that not only are there certain problems that
can not be solved (or proved) but there is no way for us to know
whether a problem is solvable or not without actually trying to
solve the problem.&lt;/p&gt;
&lt;p&gt;For
example
&lt;a href="https://en.wikipedia.org/wiki/Fermat%27s_Last_Theorem"&gt;Fermat's Last theorem&lt;/a&gt; was
assumed to unsolvable and it remained unsolved for about 358 years
until Andrew Wiles solved it.&lt;/p&gt;
&lt;p&gt;Similarly we have other challenging problems such as the Riemann
Hypothesis etc.&lt;/p&gt;
&lt;p&gt;For computer science it means that we can not have some program that
tells you whether your program will work or not. Lets break this in a
lil bit more.&lt;/p&gt;
&lt;h3&gt;Thinking exercise for CS people.&lt;/h3&gt;
&lt;p&gt;Sit down.&lt;/p&gt;
&lt;p&gt;Write a program that will take any other program and tell you if that
other program will stop or not.&lt;/p&gt;
&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;I am not expert in any of this by any stretch of the
imagination. I'm just starting out and there is a of chance that I do
not understand this fully. Maybe 20 years later I will look at these
and laugh at myself. Maybe my understanding of these is completely
wrong or misguided. &lt;/p&gt;
&lt;p&gt;But, right now I love reading about these and that i good enough for
me and honestly the the presented above are good enough. &lt;/p&gt;
&lt;p&gt;I would rather be wrong about these right now than not study waiting
for the correct time or the correct opportunity or the correct
resource to study from. I've made that error before and I do not want
to make it again. &lt;/p&gt;</content><category term="CS"></category></entry><entry><title>Turing Machine and Halting Problem</title><link href="https://signalshore.github.io/blog/Turing-Machine-and-Halting-Problem.html" rel="alternate"></link><published>2018-08-30T00:00:00+05:30</published><updated>2018-08-30T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-08-30:/blog/Turing-Machine-and-Halting-Problem.html</id><summary type="html">&lt;p&gt;In a &lt;a href="https://signalshore.github.io/blog/Lambda-Calculus-Part-2.html"&gt;previous
post&lt;/a&gt;
I talked briefly about Alan Turing's model of computation, called the
Turing Machine.&lt;/p&gt;
&lt;p&gt;Today we will look into this in more detail and discuss an interesting
problem called the Halting problem.&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;Alan Turing was interested in what it meant to &lt;em&gt;compute&lt;/em&gt; something. 
To fully grasp …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In a &lt;a href="https://signalshore.github.io/blog/Lambda-Calculus-Part-2.html"&gt;previous
post&lt;/a&gt;
I talked briefly about Alan Turing's model of computation, called the
Turing Machine.&lt;/p&gt;
&lt;p&gt;Today we will look into this in more detail and discuss an interesting
problem called the Halting problem.&lt;/p&gt;
&lt;h2&gt;Context&lt;/h2&gt;
&lt;p&gt;Alan Turing was interested in what it meant to &lt;em&gt;compute&lt;/em&gt; something. 
To fully grasp the severity of this problem we need to step back in time. &lt;/p&gt;
&lt;p&gt;This is the 1930s that we are talking about, there were no &lt;em&gt;proper&lt;/em&gt;
computers yet. Computers and the whole computer science field was not
yet born. So in this context a computer was something (or someone)
that could perform arithmetic operations. Humans who did this were
called &lt;a href="https://en.wikipedia.org/wiki/Human_computer"&gt;human computers&lt;/a&gt;
There were
mechanical
&lt;a href="https://en.wikipedia.org/wiki/Mechanical_calculator"&gt;calculators&lt;/a&gt;
that existed back then but again, they all required a human operator.&lt;/p&gt;
&lt;p&gt;So ultimately it was the operator who was responsible for making
decisions about what to do with the numbers. There was not automated
reasoning that any machine could follow.&lt;/p&gt;
&lt;p&gt;What Alan Turing was interested in; was to understand the meaning of
what it means for a task to be computable. This is one of the core
areas in Philosophy of Computer Science. However to answer this
question he needed a a formal definition of computation itself (which
did not exist at that time). &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE :&lt;/strong&gt; &lt;em&gt;As a mental exercise before doing anything else just sit back and
think about this yourself. We use computers daily but at its very
core, what does computation mean ?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So in order to have a formal definition of computation we needed a
model for computation. This is what Alan Turing came up with and this
is what we now call the Turing Machine.&lt;/p&gt;
&lt;h2&gt;The Idea&lt;/h2&gt;
&lt;p&gt;Picture a typewriter.  The Turing Machine is heavily inspired by this
system (typewriter + operator). In the book "Alan Turing: The Enigma"
the writer Andrew Hodges tells us that Alan was fascinated by
typewriters. We can see this inspiring his work.&lt;/p&gt;
&lt;p&gt;What does a typewriter have ? A typewriter has a paper for printing, a
system that outputs characters on said paper, a mechanism for input
that tells the typewriter what to print.  Additionally the typewriter
system also has the user whose job is to tell the typewrite what to do
and it keeps track of what the typewriter has already done.&lt;/p&gt;
&lt;p&gt;Now, the Turing Machine is a hypothetical machine (or more precisely a
mathematical model); it does not exist in real life. It is a state
machine which means that the machine has a finite number of states in
which it can be. It can read information/instructions from a tape and
based on that it moves from one state to another. The number of states
is finite. It can also write data on the tape.&lt;/p&gt;
&lt;p&gt;A Turing Machine has 4 main parts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The tape&lt;/li&gt;
&lt;li&gt;The head&lt;/li&gt;
&lt;li&gt;The state&lt;/li&gt;
&lt;li&gt;The transition table&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;strong&gt;tape&lt;/strong&gt; is the memory of the machine. The tape is divided into
blocks of the same width and only one symbol is present in one
block. The machine can read symbols from this tape and can write
symbols to this tape. At a given time there is only one symbol in the
machine. This symbol is referred to as the &lt;em&gt;scanned&lt;/em&gt; symbol. The
machine can be supplied with an infinitely long tape.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;head&lt;/strong&gt; is a contraption that can read symbols from the tape and can
write symbols to the tape as well. The head can also move the tape to
the left or right but by only one block at a time.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;state&lt;/strong&gt; of the Turing Machine. This state is a intriguing
concept. This &lt;em&gt;state&lt;/em&gt; is used to replace the &lt;em&gt;state of mind&lt;/em&gt; of the
typewriter operator (or any person performing any computation for that
matter). At any time the Turing Machine can be one of many finite
states.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;transition table&lt;/strong&gt; is a set of finite rules that given the current
state the machine is currently and the scanned symbol tells the Turing
Machine to write a symbol into the tape, then move the tape left or
right and finally to assume a new state (or stay in the same one).&lt;/p&gt;
&lt;p&gt;Now the Turing Machine is a model of computation, thus it must be
able to do some computation; right? So how does it do that. &lt;/p&gt;
&lt;h2&gt;Problems for a Turing Machine.&lt;/h2&gt;
&lt;p&gt;Problems in Automata Theory are generally of the form that involves
some "computer" determining if some string belongs to a set of strings
or not, based on some rules. This set of strings is called that follow
a general rule for membership is called a Language and the "computer"
involved is called an automaton which is nothing but a model of
computation. We choose to represent various computational problems as
languages because we already have established a terminology for
dealing with languages.&lt;/p&gt;
&lt;p&gt;To perform some computation in a Turing Machine we write a program
for the machine. This program is basically a set of transition rules.&lt;/p&gt;
&lt;p&gt;Given any string as input the Turing Machine can do one of three
things. It can stop and &lt;strong&gt;accept&lt;/strong&gt; the string or it can &lt;strong&gt;reject&lt;/strong&gt; the
string or it can &lt;strong&gt;loop&lt;/strong&gt; indefinitely over the input.&lt;/p&gt;
&lt;p&gt;When the TM is in either the accept or the reject state after
processing a string then we say that the TM has halted (as in stopped
running on the output). On the other hand if the TM does not halt and
instead keeps on looping indefinitely then it means that the TM will
never stop working or never halt. When a TM has halted it indicates
that the TM has decided the string (either accept or reject) on the
other hand when it does not halt then the string (or rather the
problem) is said to be undecidable.&lt;/p&gt;
&lt;p&gt;All this can get quite intense, so here is an intuitive definition of
computation by a Turing
Machine. The
&lt;a href="https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis"&gt;Church-Turing thesis&lt;/a&gt; showed
that a Turing Machine algorithm captures &lt;strong&gt;all&lt;/strong&gt; algorithms. This
means that if for a given problem we can design a Turing Machine
algorithms then that problem is actually solvable. As we will soon
see that there are certain problems that are so complex that there
exists no algorithm that can solve them. In-fact while describing
Turing Machine algorithms we do not need to go into the implementation
level details of how the head and the tapes move; instead we can just
use English prose to describe an algorithm. The only requirement is
that an algorithm to stop in a finite number of steps (this is quite
literally the definition of an algorithm).&lt;/p&gt;
&lt;h2&gt;Universal Turing Machine&lt;/h2&gt;
&lt;p&gt;A Turing Machine is generally programmed to perform only a single type
of computation. However there is a class of Turing Machines called the
Universal Turing Machine which can perform any sort of computation. In
fact this property of this Turing Machine is what makes a Turing
Machine such a powerful model for computation. &lt;/p&gt;
&lt;p&gt;The Universal Turing Machine can simulate any arbitrary Turing machine
on any arbitrary string. It does this by reading the description of
the Turing machine and the string input from its own tape and then
processing them.&lt;/p&gt;
&lt;p&gt;This makes the Turing Machine capable of answering questions about the
behavior of other Turing machines. This model of computation is a
very accurate model of modern computers where computers have access to
a random access memory. This is the same as the tape in a Turing
Machine.&lt;/p&gt;
&lt;p&gt;Thus the problems these Turing Machines can tackle are generally of
the form where we test the behavior of some arbitrary Turing machine
on some arbitrary input.&lt;/p&gt;
&lt;h2&gt;The Halting Problem&lt;/h2&gt;
&lt;p&gt;The Halting Problem is a decision problem of determining whether any
arbitrary Turing Machine will halt on an arbitrary string input or
not. &lt;/p&gt;
&lt;p&gt;In other words lets say that we have a Language &lt;span class="math"&gt;\(H_{Lang}\)&lt;/span&gt; which is
made up of all string encoding of the form &lt;span class="math"&gt;\(&amp;lt;B,w&amp;gt;\)&lt;/span&gt; where &lt;span class="math"&gt;\(B\)&lt;/span&gt; is a
Turing Machine and &lt;span class="math"&gt;\(w\)&lt;/span&gt; is a string and &lt;span class="math"&gt;\(B\)&lt;/span&gt; halts on &lt;span class="math"&gt;\(w\)&lt;/span&gt;. We need to
show that &lt;span class="math"&gt;\(H_{Lang}\)&lt;/span&gt; is undecidable. Which means that there isn't a
single imaginable Turing Machine that can decide &lt;span class="math"&gt;\(H_{Lang}\)&lt;/span&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Which means that no one can ever design a Turing Machine that will
be able to take an arbitrary string &lt;span class="math"&gt;\(w\)&lt;/span&gt; and an arbitrary Turing
machine &lt;span class="math"&gt;\(B\)&lt;/span&gt; and tell whether &lt;span class="math"&gt;\(B\)&lt;/span&gt; will halt on &lt;span class="math"&gt;\(w\)&lt;/span&gt; or not. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now, this might seem like a fairly un-important detail but this has
some far-reaching implications as we will soon see. But before that we
will prove the above statement. This is a fun proof that illustrates
how to think about these problems in general.&lt;/p&gt;
&lt;h3&gt;Proof&lt;/h3&gt;
&lt;p&gt;Let us assume that such a machine does exist and let us call it
&lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Construction of &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input :&lt;/strong&gt; String &lt;span class="math"&gt;\(&amp;lt;B,w&amp;gt;\)&lt;/span&gt;, where &lt;span class="math"&gt;\(B\)&lt;/span&gt; is a TM and &lt;span class="math"&gt;\(w\)&lt;/span&gt; is a string.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Run :&lt;/strong&gt; Simulates &lt;span class="math"&gt;\(w\)&lt;/span&gt; on &lt;span class="math"&gt;\(B\)&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accepts :&lt;/strong&gt; &lt;span class="math"&gt;\(w\)&lt;/span&gt; if &lt;span class="math"&gt;\(B\)&lt;/span&gt; halts on &lt;span class="math"&gt;\(w\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rejects :&lt;/strong&gt; &lt;span class="math"&gt;\(w\)&lt;/span&gt; if &lt;span class="math"&gt;\(B\)&lt;/span&gt; does not halt on &lt;span class="math"&gt;\(w\)&lt;/span&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;This&lt;/em&gt; is the decider that we have to prove can not exist.&lt;/p&gt;
&lt;p&gt;Now, since &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt; already exists we can use this machine to
construct another Turing Machine &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt; which has &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt; as a
subroutine (hence the sub-subscript notation).&lt;/p&gt;
&lt;p&gt;Construction of &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Input :&lt;/strong&gt; String &lt;span class="math"&gt;\(&amp;lt;M&amp;gt;\)&lt;/span&gt;, where &lt;span class="math"&gt;\(M\)&lt;/span&gt; is a Turing machine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Runs :&lt;/strong&gt; Simulates &lt;span class="math"&gt;\(&amp;lt;M, &amp;lt;M&amp;gt;&amp;gt;\)&lt;/span&gt; on &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Accepts :&lt;/strong&gt; &lt;span class="math"&gt;\(&amp;lt;M&amp;gt;\)&lt;/span&gt; if &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt; rejects &lt;span class="math"&gt;\(&amp;lt;M, &amp;lt;M&amp;gt;&amp;gt;\)&lt;/span&gt;, i.e. if &lt;span class="math"&gt;\(M\)&lt;/span&gt; rejects &lt;span class="math"&gt;\(&amp;lt;M&amp;gt;\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Rejects :&lt;/strong&gt; &lt;span class="math"&gt;\(&amp;lt;M&amp;gt;\)&lt;/span&gt; if &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt; accepts &lt;span class="math"&gt;\(&amp;lt;M, &amp;lt;M&amp;gt;&amp;gt;\)&lt;/span&gt;, i.e. if &lt;span class="math"&gt;\(M\)&lt;/span&gt; accepts &lt;span class="math"&gt;\(&amp;lt;M&amp;gt;\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Now, what happens if we run &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt; on &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}&amp;gt;\)&lt;/span&gt; ?&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;By the above Accept and Reject conditions, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt; &lt;strong&gt;accepts&lt;/strong&gt; &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}&amp;gt;\)&lt;/span&gt;, then it means that &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt;
  rejected &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}, &amp;lt;D_{TM_H} &amp;gt;&amp;gt;\)&lt;/span&gt; which means that &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt;
  &lt;strong&gt;rejects&lt;/strong&gt; &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}&amp;gt;\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;If &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt; &lt;strong&gt;rejects&lt;/strong&gt; &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}&amp;gt;\)&lt;/span&gt;, then it means that &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt;
  accepted &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}, &amp;lt;D_{TM_H} &amp;gt;&amp;gt;\)&lt;/span&gt; which means that &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt;
  &lt;strong&gt;accepted&lt;/strong&gt; &lt;span class="math"&gt;\(&amp;lt;D_{TM_H}&amp;gt;\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is a contradiction because it implies that &lt;span class="math"&gt;\(D_{TM_H}\)&lt;/span&gt; accepts
itself if it rejects itself.&lt;/p&gt;
&lt;p&gt;Hence our initial assumption about the existence of &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt; must be
wrong. Hence &lt;span class="math"&gt;\(H_{TM}\)&lt;/span&gt; can not exist.&lt;/p&gt;
&lt;h6&gt;There is another proof for this that uses the Cantor's diagonalisation argument&lt;/h6&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This means that&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There does not exist a single algorithm that can us if another
algorithm will halt or not&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Static analyzers try and do solve some of these limitations but yes,
they are not 100% accurate, because they are mathematically guaranteed
to not be 100% accurate.&lt;/p&gt;
&lt;p&gt;This post is part of a series of posts that I have planned. In the
next one we will talk about Godels Incompletelness Theorems and
Hilberts Problems.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="CS"></category></entry><entry><title>Moving from Bangalore to Mumbai</title><link href="https://signalshore.github.io/blog/Bangalore-To-Mumbai.html" rel="alternate"></link><published>2018-08-06T00:00:00+05:30</published><updated>2018-08-06T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-08-06:/blog/Bangalore-To-Mumbai.html</id><summary type="html">&lt;p&gt;So things got really interesting in the previous month. &lt;/p&gt;
&lt;p&gt;After my degree course got over, I was supposed to join Deloitte as a
campus recruit. Before the joining I attended the training program for
campus recruits for about two weeks.&lt;/p&gt;
&lt;p&gt;In the mean time I responded to a tweet about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;So things got really interesting in the previous month. &lt;/p&gt;
&lt;p&gt;After my degree course got over, I was supposed to join Deloitte as a
campus recruit. Before the joining I attended the training program for
campus recruits for about two weeks.&lt;/p&gt;
&lt;p&gt;In the mean time I responded to a tweet about a job position and that
tweet changed my life. That tweet let to a series of interviews which
culminated in a very generous job offer from a company in Mumbai. The
best part is that this is the most &lt;em&gt;perfect&lt;/em&gt; job that I could hope
for.  My "official" job title is Linux Administrator, but there is
more to it.&lt;/p&gt;
&lt;p&gt;&lt;img alt="that tweet" src="/assets/images/2018-08-06/twitter.png"&gt;&lt;/p&gt;
&lt;h5&gt;This is the tweet that changed everything... :-P&lt;/h5&gt;
&lt;h3&gt;Tl;Dr&lt;/h3&gt;
&lt;p&gt;I am moving to Mumbai. In fact I leave in like half an hour for my
flight. I am at my aunts place right now. This place was the first
building I walked into after I first arrived in Bangalore and I
thought it would be very poetic if this was the last building I walk
out of when I am leaving Bangalore for good (at least in near
foreseeable future). I will be visiting Bangalore from time to time
though.&lt;/p&gt;
&lt;h2&gt;So What about Bangalore ?&lt;/h2&gt;
&lt;p&gt;Bangalore would always be the place I grew the F$#&amp;amp; up; because quite
honestly in Kolkata until I left, i was used to stuff like my mother
waiting with cooked food for me and someone else taking care of my
documents and having pocket money etc. All this changed when I first
moved to Bangalore. I remember not getting dinner one day during the
first week when I feel asleep for a slightly longer time. It was a
good learning experience. Living alone hits you in the face with a
truck. But, its fun and you get used to it after a while.&lt;/p&gt;
&lt;p&gt;The down side of this is that you get so accustomed to being in-charge
that you begin to hate your family for trying to micromanage
everything from half a country away. :-P&lt;/p&gt;
&lt;p&gt;Anyway, I am moving now, maybe I will come back here (to stay) if my
works brings me.&lt;/p&gt;
&lt;h2&gt;About moving ...&lt;/h2&gt;
&lt;p&gt;To be completely honest; I am slightly excited about moving. But,
that's it &lt;em&gt;slightly&lt;/em&gt; excited. I really like to work on things that I
like and for that I am willing to move anywhere. People who have
interacted with me during these past three years know how much
obsessive I can be with my work. So as long as my work is getting
done, I don't really care where I live. (Maybe this is not an &lt;em&gt;ideal&lt;/em&gt;
thing.. but again I don't really care)&lt;/p&gt;
&lt;p&gt;Moreover, I do not own too many things, so moving for me is like a
really long vacation. My most value-able possessions are my books (SICP
and CLRS !!). I don't cook for myself yet, I generally outsource it to
the nearest shop. I think this will change in Mumbai though. Also I do
not have too items in the luggage front as well. Just three bags
(including my backpack) which is really very less for someone moving
to a different city and vacating their accommodation of three years.&lt;/p&gt;
&lt;p&gt;So technically I can literally stuff everything I own into three
bags. :-) &lt;/p&gt;
&lt;p&gt;I have been very very fortunate to meet/know some of the people that I
know. All of them have had some impact on my life. I wanted to list
all of them here but that would be a disservice to the people not
listed. &lt;/p&gt;
&lt;p&gt;I haven't figured out a place to stay in Mumbai yet. I am going to
"wing" it. :-P&lt;/p&gt;
&lt;h2&gt;About work&lt;/h2&gt;
&lt;p&gt;THIS is the thing I am most excited about. I value my work greatly
above everything else. This job even though it is in a small company,
will give me a lot of learning experiences than Deloitte. At Deloitte
joining as a fresher I would be at the bottom of the hierarchy,
however in this company I will be part of a very small technology team
and interestingly enough I will be the second sysadmin. Thus the scope
of responsibility is great. I will also have more decision making
powers than at Deloitte. Plus they are paying my well. Moreover I will
get to work with some of the most cutting edge open source
technologies and LINUX. (keywords are open source and Linux)&lt;/p&gt;
&lt;h2&gt;About FSMK&lt;/h2&gt;
&lt;p&gt;Most of the work I do for FSMK can be done remotely, so I doubt that
it will be a problem. However I am also in the process of mentoring a
second batch of sysadmins at FSMK so that these kids can take up the
work.&lt;/p&gt;
&lt;p&gt;Apart from this I will surely miss attending/speaking at the camps and all. &lt;/p&gt;
&lt;p&gt;A good thing is that Vikram from FSMK lives in Mumbai and he lives
quite near to my office. So maybe I will get some pointers from him
about similar organizations.&lt;/p&gt;
&lt;h2&gt;SO...&lt;/h2&gt;
&lt;p&gt;So this is it. I will continue posting about Theoretical Computer
Science and scheme and everything else from Mumbai. It will take some
time. I need to get set up and get up to speed at work.&lt;/p&gt;
&lt;p&gt;so yeah.. &lt;/p&gt;
&lt;p&gt;My next post will be from Mumbai. &lt;/p&gt;
&lt;p&gt;It has been awesome Bangalore!!! &amp;lt;3&lt;/p&gt;</content><category term="Misc"></category></entry><entry><title>The Infinity - How maths can blow your mind!!</title><link href="https://signalshore.github.io/blog/The-Infinity.html" rel="alternate"></link><published>2018-07-03T00:00:00+05:30</published><updated>2018-07-03T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-07-03:/blog/The-Infinity.html</id><summary type="html">&lt;p&gt;I am writing this post because I am fascinated by the idea of infinity
and I think it is something that we do not talk enough about.&lt;/p&gt;
&lt;p&gt;Moreover off late I am reading about Theoretical Computer Science and
I find encountering this concept again and again. I am just beginning …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am writing this post because I am fascinated by the idea of infinity
and I think it is something that we do not talk enough about.&lt;/p&gt;
&lt;p&gt;Moreover off late I am reading about Theoretical Computer Science and
I find encountering this concept again and again. I am just beginning
to understand the connection between Computer Science and
Mathematics.(note that I used Computer &lt;em&gt;Science&lt;/em&gt; as not Computer
&lt;em&gt;Engineering&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;To be honest infinity is a very weird and un-intuitive concept to get
your head around and I don't think I understand it fully at this point
and I don't I ever will. However, here goes nothing.&lt;/p&gt;
&lt;p&gt;Let's begin.&lt;/p&gt;
&lt;h2&gt;What is Infinity ?&lt;/h2&gt;
&lt;p&gt;Infinity is a concept that describes the of never-ending-ness of
something. If I were to say that something is infinite it means that
that &lt;em&gt;something&lt;/em&gt; is never ending. It is never-ending no matter what we
take away from it or add to it. &lt;/p&gt;
&lt;p&gt;This concept can be illustrated in the famous hotel called the &lt;a href="https://en.wikipedia.org/wiki/Hilbert's_paradox_of_the_Grand_Hotel"&gt;Hilbert's Hotel&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This hotel has an interesting property - it has an infinite number of
rooms which are all occupied.  &lt;/p&gt;
&lt;p&gt;So if they are all occupied then how do they accommodate new customers
?&lt;/p&gt;
&lt;p&gt;In Hilbert's hotel, whenever a new customer comes into the hotel
management shifts all the other customers to the next room and the new
customer is allotted the first room.&lt;/p&gt;
&lt;p&gt;Thus this hotel can accommodate an infinite number of people.&lt;/p&gt;
&lt;h2&gt;Infinities in Mathematics&lt;/h2&gt;
&lt;p&gt;There are a whole lot of things to talk about infinity, however
neither am I qualified enough nor do we want a post of infinite
length. So we will focus on two infinite sets in mathematics.&lt;/p&gt;
&lt;p&gt;The set of whole numbers in Mathematics. This set is a set of all
positive integers beginning from 0 and this is an infinite set. This
is the famous set &lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt; and the set of all Real numbers. This
set consists of any number that can be represented on a number
line. This is the famous set &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Are all infinities equal ?&lt;/h2&gt;
&lt;p&gt;That is a loaded question!! It sounds simple doesn't it?  If infinity
means that something is never ending then all infinities must be
equal; right ?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WRONG !!&lt;/strong&gt; Turns out there are different kinds of
infinities. Countable Infinities and Un-countable infinities.&lt;/p&gt;
&lt;p&gt;Let's unpack this argument from the beginning and in the end we will
compare the two sets we talked about before (&lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt; and
&lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;)&lt;/p&gt;
&lt;p&gt;Two sets P and Q are said to be equal sets if they have the same
number of elements (or they sets have the same cardinality). Now the
question arises that if two sets are infinite then how do we compare
if they have the same number of elements or not.&lt;/p&gt;
&lt;p&gt;This is the brilliance of it all. To establish the equality between &lt;span class="math"&gt;\(P\)&lt;/span&gt;
and &lt;span class="math"&gt;\(Q\)&lt;/span&gt; we do not need to and we can not count the number of elements in
each set and show that they are equal, we just need to show that &lt;em&gt;if&lt;/em&gt;
counting the number of elements were possible then the sets would be
equal. We do this by showing
a
&lt;a href="https://en.wikipedia.org/wiki/Bijection"&gt;one-to-one correspondence (Bijection)&lt;/a&gt; between
the elements of the two sets. This, is a fancy way to say that we have
to show that we can pair every element of the first set with an
element of the second set.&lt;/p&gt;
&lt;p&gt;Comparing the two sets (&lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt; and &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;) will make this
idea more clear.  Set &lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt; is the set of Natural numbers and
set &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt; is the set of Real numbers. For this experiment we
will only consider the numbers between 0 and 1 from the set
&lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;. Thus this small interval will include numbers like 
&lt;span class="math"&gt;\(0.01, 0.0001, 0.00235421, ...)\)&lt;/span&gt;. Now, let us select such numbers from
this interval in ascending order and pair them up with each element
from the set &lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Soon, we will run out of numbers from &lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt;. This happens
because no matter how you choose, you &lt;strong&gt;can not&lt;/strong&gt; choose numbers in
ascending order (or any order for that matter) from set &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;.
Say you choose &lt;span class="math"&gt;\(0.01\)&lt;/span&gt; and the next number you choose is &lt;em&gt;0.02&lt;/em&gt;,
however there are still numbers like &lt;span class="math"&gt;\(0.001\)&lt;/span&gt; and &lt;span class="math"&gt;\(0.000001\)&lt;/span&gt; and so on.
In fact, there are infinitely many numbers between any two numbers from
the set &lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;You can image this as having numbers on a number line and you can just
&lt;em&gt;zoom&lt;/em&gt; into the line indefinitely and all you would do is just
increase the granularity of the numbers. The numbers would &lt;strong&gt;never&lt;/strong&gt; end.&lt;/p&gt;
&lt;p&gt;Thus the set &lt;span class="math"&gt;\(\mathbb{N}\)&lt;/span&gt; is a countably-infinite set while the set
&lt;span class="math"&gt;\(\mathbb{R}\)&lt;/span&gt; is uncountably-infinite.&lt;/p&gt;
&lt;h2&gt;Another WILD idea ...&lt;/h2&gt;
&lt;p&gt;Take the set of all Natural numbers. This set contains all numbers
from 1 to infinity.  Take another set containing all the even numbers
from &lt;span class="math"&gt;\(2\)&lt;/span&gt; to infinity.&lt;/p&gt;
&lt;p&gt;So now we have two different sets. What is the size of each of these sets ? &lt;/p&gt;
&lt;p&gt;Basic intuition suggests that the set of all natural numbers will be
twice as large as the set of all even numbers. But, that is not the
case. Both the sets are of infinite length. In fact both of these sets
have exactly the same number of elements.&lt;/p&gt;
&lt;p&gt;This suggests some weird arithmetic. 
If you add infinity with a number; you get back infinity.
If you remove a number from a infinity; you get back infinity.
If you divide infinity by a number; you get back infinity.
If you multiply infinity by a number; you get back infinity.&lt;/p&gt;
&lt;h5&gt;&lt;em&gt;Crazy isn't it ?? :-P&lt;/em&gt;&lt;/h5&gt;
&lt;h2&gt;Stretch your brains a bit more&lt;/h2&gt;
&lt;p&gt;If the last section didn't rattle your brains enough, then let us look
at something more bizarre.&lt;/p&gt;
&lt;p&gt;This is a thought experiment. Let us imagine a circle with radius
&lt;span class="math"&gt;\(r\)&lt;/span&gt;. Thus the circumference of this circle is &lt;span class="math"&gt;\(2 \pi r\)&lt;/span&gt;. Thus the
circumference of a circle is not rational. It is however a Real
Number.&lt;/p&gt;
&lt;p&gt;Now, if you start from point &lt;span class="math"&gt;\(A\)&lt;/span&gt; on the circumference of this circle
and you take &lt;span class="math"&gt;\(\pi\)&lt;/span&gt; steps every time then you will never reach the same
point &lt;span class="math"&gt;\(A\)&lt;/span&gt; ever again. &lt;/p&gt;
&lt;p&gt;This happens because of the irrationality of the circumference. You
can imagine the circumference of the circle as two points marked on
the Real number line at &lt;span class="math"&gt;\(0\)&lt;/span&gt; and at &lt;span class="math"&gt;\(2 \pi r\)&lt;/span&gt;. As we have seen
previously there can be infinitely many numbers between any two
numbers on the real number line. Now if we were to remove the original
point &lt;span class="math"&gt;\(A\)&lt;/span&gt; the circle would remain as it is and the "gap" in its
position will be replaced by some other point since we have an
infinite supply of points. &lt;/p&gt;
&lt;p&gt;There is also an incredible paradox called
the
&lt;a href="https://en.wikipedia.org/wiki/Banach%E2%80%93Tarski_paradox"&gt;Banach-Tarski Paradox&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The non-mathematical version of this paradox can be paraphrased that
&lt;em&gt;there are certain methods in which a sphere can be decomposed (broken
down or taken apart) into a finite number of subsets such that these
subsets can be recombined to form two exact copies of the original
sphere&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;If this were true is the physical world then it would mean that we
could take an orange and turn that into two oranges. However, the
physical world is different from the mathematical one in a way that
the physical world is bound by the laws of physics, while the
mathematical world is not. Hence the fun sphere in the mathematical
world does not follow
the
&lt;a href="https://en.wikipedia.org/wiki/Conservation_of_mass"&gt;&lt;strong&gt;law of conservation of mass&lt;/strong&gt;&lt;/a&gt; while
the poor sphere in the physical world needs to follow it. This is why
we can not create infinite oranges and we can not have a circle form
which you can remove a point and the size of the circle will still
remain the same.&lt;/p&gt;
&lt;p&gt;Bummer right!! :-P (I KNOW!!!)&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I first read about the Banach-Tarski paradox in a video and I was blown
away by it. The idea was so revolting, but at the same time it made so
much sense. &lt;/p&gt;
&lt;p&gt;If this blog post scratched &lt;em&gt;that&lt;/em&gt; part of your brain that says
"wait-a-minute-but-how" then please go ahead and read about infinity! &lt;/p&gt;
&lt;p&gt;It's amazing. &lt;/p&gt;
&lt;p&gt;And finally a huge thanks to Vasauce for &lt;a href="https://www.youtube.com/watch?v=s86-Z-CbaHA"&gt;this video&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This post was primarily inspired by that video!! :-)&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="Misc"></category><category term="Math"></category></entry><entry><title>CO2 trends between India and USA</title><link href="https://signalshore.github.io/blog/CO2-trends-between-India-and-USA.html" rel="alternate"></link><published>2018-06-21T00:00:00+05:30</published><updated>2018-06-21T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-06-21:/blog/CO2-trends-between-India-and-USA.html</id><summary type="html">&lt;h1&gt;Disclaimer and Introduction&lt;/h1&gt;
&lt;p&gt;I am by no means an expert in Data Science. I am just starting to
explore the vast field of data science because of a lot of other cool
things that I like reading about rely heavily on Data Analystics.&lt;/p&gt;
&lt;p&gt;I was kind of stupid to ignore …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Disclaimer and Introduction&lt;/h1&gt;
&lt;p&gt;I am by no means an expert in Data Science. I am just starting to
explore the vast field of data science because of a lot of other cool
things that I like reading about rely heavily on Data Analystics.&lt;/p&gt;
&lt;p&gt;I was kind of stupid to ignore the field of data science because
somehow I believed that the &lt;em&gt;data&lt;/em&gt; in data science comes from humans
using applications that do not respect our privacy and the &lt;em&gt;analytics&lt;/em&gt;
in data analytics is only used to train recommendation algorithms
which we call Artificial Intelligence.&lt;/p&gt;
&lt;p&gt;I was stupid, I admit it. Turns out AI and recommendation algorithms
are just a small subset of Data Science. Here is a list of vast fields
within Computer Science that rely heavily on data science.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Computational modeling (computerized drug simulations, weather
  forecasting, computational fluid dynamics etc)&lt;/li&gt;
&lt;li&gt;Astrophysics (radio telescopes, etc)&lt;/li&gt;
&lt;li&gt;High-energy physics (cool stuff at CERN et. al.)&lt;/li&gt;
&lt;li&gt;Medical Imaging (fMRI, MRI etc)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;All of these activities generate some amount of data and later this
data is processed by computers to create all sorts of cool results
like false color images (yeah... the images of the Galaxy that we see
are false color images), graphs etc etc.&lt;/p&gt;
&lt;p&gt;With all this in mind I started a course on edX. It is called
the
&lt;a href="https://courses.edx.org/courses/course-v1:UCSanDiegoX+DSE200x+1T2018/course/"&gt;Python for Data Science&lt;/a&gt;.
It is brilliant and if you are into Data Science then I suggest that
you should take this course.&lt;/p&gt;
&lt;h2&gt;So let's talk about this thingy..&lt;/h2&gt;
&lt;p&gt;As a part of this course we have to do a small project using a data-set
that we have used in the course itself. Since I am very much
interested in the environment and the preservation of the environment
I decided to use the World Development Indicators data-set released by
the World Bank and I started to explore the CO2 emissions of India.&lt;/p&gt;
&lt;p&gt;The data-set included all sorts of fun data including data on what
percentage of the CO2 emissions came form which type of economic
activities (like electricity and heating, manufacturing,
transportation etc)&lt;/p&gt;
&lt;p&gt;Exploring the data of India was not too much fun especially since I do
not have any background in this field. So, I did a comparative study
between the CO2 trends in India and the USA and the results are
really very shocking (maybe I was expecting something else :-P)&lt;/p&gt;
&lt;h2&gt;Results&lt;/h2&gt;
&lt;h3&gt;Correlation between CO2 per capita and GDP per capita for INDIA&lt;/h3&gt;
&lt;p&gt;Here is the graph that shows the CO2 emissions per capita from 1960 to 2011.
&lt;img alt="India CO2 per capita" src="/assets/images/2018-06-21/indiaCo2.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, let us see the GDP from 1960 to 2014.
&lt;img alt="India GDP per capita" src="/assets/images/2018-06-21/indiaGdp.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we will use a scatter plot to look at the correlation.
&lt;img alt="India correlation" src="/assets/images/2018-06-21/indiaCor.png"&gt;&lt;/p&gt;
&lt;p&gt;We have calculated a correlation value of 0.967 using the
the
&lt;a href="https://docs.scipy.org/doc/numpy/reference/generated/numpy.corrcoef.html"&gt;numpy.corrcoef&lt;/a&gt; method. This
method returns
the
&lt;a href="https://en.wikipedia.org/wiki/Pearson_correlation_coefficient"&gt;Pearson correlation coefficient&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Correlation between CO2 per Capita and GDP per capita for USA&lt;/h3&gt;
&lt;p&gt;Here is the graph that shows the CO2 emissions per capita from 1960 to 2011.
&lt;img alt="USA CO2 per capita" src="/assets/images/2018-06-21/usaCo2.png"&gt;&lt;/p&gt;
&lt;p&gt;Next, let us see the GDP from 1960 to 2014.
&lt;img alt="USA GDP per capita" src="/assets/images/2018-06-21/usaGdp.png"&gt;&lt;/p&gt;
&lt;p&gt;Now we will use a scatter plot to look at the correlation.
&lt;img alt="USA correlation" src="/assets/images/2018-06-21/usaCor.png"&gt;&lt;/p&gt;
&lt;p&gt;We have calculated a correlation value of 0.067 which is almost negligible.&lt;/p&gt;
&lt;p&gt;NOTE: Can we take a moment here and just marvel at the staggering difference in the Y-axis vales for the CO2 emissions per capita and the GDP per capita vales for India and USA.&lt;/p&gt;
&lt;p&gt;For India the range of the Y-axis of the CO2 emissions is 0-2.0 metric tons per capita while the same range is 0-25 metric tons per capita or the USA.&lt;/p&gt;
&lt;p&gt;Similarly the range of the Y-axis of GDP per capita is 0-1200 US for India while the same range is 0-50000 US$ for the USA. &lt;/p&gt;
&lt;h3&gt;CO2 emissions by fuel types in India and USA&lt;/h3&gt;
&lt;p&gt;&lt;img alt="India State" src="/assets/images/2018-06-21/indiaState.png"&gt;&lt;/p&gt;
&lt;p&gt;In this we can see that most of CO2 emissions in India are due to solid fuels. &lt;/p&gt;
&lt;p&gt;&lt;img alt="USA State" src="/assets/images/2018-06-21/usaState.png"&gt;
In USA the major source of CO2 emission is from the combustion of liquid forms of fuel. &lt;/p&gt;
&lt;h3&gt;CO2 emissions by economic activities&lt;/h3&gt;
&lt;p&gt;Now in this graph we show the different sets of economic activities that are responsible for CO2 emissions.&lt;/p&gt;
&lt;p&gt;&lt;img alt="India per" src="/assets/images/2018-06-21/indiaPer.png"&gt;&lt;/p&gt;
&lt;p&gt;As we can see that the major contributor of CO2 emissions in India is
the production of Electricity and Heating, followed by the
Manufacturing and Construction related activities.&lt;/p&gt;
&lt;p&gt;Now, let us look at the graph for the USA.
&lt;img alt="USA per" src="/assets/images/2018-06-21/usaPer.png"&gt;&lt;/p&gt;
&lt;p&gt;These two graphs are more or less similar in nature with one major
difference. In the USA the Transportation sector is th second largest
contributor to CO2 emissions unlike in India where the Manufacturing
and construction sector is the second largest contributor.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;I just think that this was very fun. 
I used Python for all the work (Python is really amazing!! :-))&lt;/p&gt;
&lt;p&gt;All the code is available as
a
&lt;a href="https://www.kaggle.com/data83/comparative-study-of-co2-trends-in-india-and-usa"&gt;Kaggle Kernel&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;This is my first kernel. I will keep writing more cool kernels. &lt;/p&gt;
&lt;p&gt;The data-set was also obtained from &lt;a href="https://kaggle.com"&gt;Kaggle&lt;/a&gt; and it is the &lt;a href="https://www.kaggle.com/worldbank/world-development-indicators"&gt;World development Indicators&lt;/a&gt; by the World Bank. &lt;/p&gt;
&lt;p&gt;Its a HUGE data-set and I have not even managed to explore even 1% of
it. A LOT of domain knowledge is needed to do some actual data
science. :-P&lt;/p&gt;
&lt;p&gt;Anyway, this was my Hello-World and I am happy!! :-)&lt;/p&gt;
&lt;p&gt;p.s. Check out my &lt;a href="https://kaggle.com/data83"&gt;Kaggle profile&lt;/a&gt;&lt;/p&gt;</content><category term="Env"></category><category term="Data"></category></entry><entry><title>Planet List</title><link href="https://signalshore.github.io/blog/Planet-List.html" rel="alternate"></link><published>2018-06-13T00:00:00+05:30</published><updated>2018-06-13T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-06-13:/blog/Planet-List.html</id><summary type="html">&lt;p&gt;I am an environmentalist. I have been an environmentalist for as long
as I can remember, however recently (like for the past year or so) I
am slowly transitioning from an arm-chair environmentalist to a vocal
environmentalist.&lt;/p&gt;
&lt;p&gt;As a part of this transitioning phase I have decided to learn about …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I am an environmentalist. I have been an environmentalist for as long
as I can remember, however recently (like for the past year or so) I
am slowly transitioning from an arm-chair environmentalist to a vocal
environmentalist.&lt;/p&gt;
&lt;p&gt;As a part of this transitioning phase I have decided to learn about
the issues in greater detail and to talk about them with my peers. It
is very surprising to see that people can care about issues like
Feminism and Online Privacy while at the same time being completely
ignorant to the issues that plague the environment. Personally I
believe that Climate Change is one of the biggest issues humanity is
facing and it deserves some attention. &lt;/p&gt;
&lt;p&gt;Through this blog I mainly write about things that I care about and
that is what I plan to do about the environmental issues as well. I
will need to do some research on these myself for them to be
blog-worthy.&lt;/p&gt;
&lt;p&gt;I was an arm-chair environmentalist for a long time and it wasn't
doing anyone any good. So I feel that it's time that I started talking
about this. &lt;/p&gt;
&lt;h2&gt;What is the Planet List ?&lt;/h2&gt;
&lt;p&gt;The Planet List is a list of rules/guidelines that I follow during my
everyday living.&lt;/p&gt;
&lt;p&gt;My friends know that most of my decision are based on some
environmental factor, no matter how small they are. I am to be as less
wasteful as possible. I am going to share them today hoping that I can
inspire at least one person.&lt;/p&gt;
&lt;p&gt;I will try to make this list as exhaustive as possible and I will keep
adding things to this list as I learn them. &lt;/p&gt;
&lt;p&gt;The main goal of the &lt;strong&gt;rules&lt;/strong&gt; in this list is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To reduce the waste that I am introducing into the world&lt;/li&gt;
&lt;li&gt;To reduce my personal &lt;a href="https://en.wikipedia.org/wiki/Carbon_footprint"&gt;carbon footprint&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;To reduce the environmental impact of my actions&lt;/li&gt;
&lt;li&gt;To transition into a sustainable form of living&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is no free lunch. Every decision you make sets of series of
chain reactions that ultimately screw over some unfortunate life-form
on this planet for no fault of theirs.&lt;/p&gt;
&lt;h2&gt;The List&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Getting from point A to point B (aka transportation)&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Walk if the destination is less than 3kms from the source.&lt;/li&gt;
&lt;li&gt;Ride a bicycle is the destination is less than 10kms from the source.&lt;/li&gt;
&lt;li&gt;Use public modes of transport. ALWAYS.&lt;/li&gt;
&lt;li&gt;Use the Metro or other mass rapid transit system. (it probably
   runs on electricity)&lt;/li&gt;
&lt;li&gt;Avoid personal vehicles at all costs whenever possible.&lt;/li&gt;
&lt;li&gt;Optimize your daily schedule around public transport peak
   timings so that you can avail the system&lt;/li&gt;
&lt;li&gt;Optimize your vehicle. (i.e. take a two-wheeler to office if you
   are the only one traveling, cause this way you waste one seat
   while in a 4-seat-er car the other 3 seats are wasted.)&lt;/li&gt;
&lt;li&gt;Optimize your travel. Schedule things in such a way that you do
   not need to travel to the same area multiple times a day to
   get some job done.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eating Stuff&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;s&gt;Go vegetarian&lt;/s&gt;. Well this is not quite true. The problem is with beef and not any other form of meat. Beef production takes a huge toll on the environment. &lt;a href="https://www.washingtonpost.com/news/wonk/wp/2015/12/18/being-a-vegetarian-might-make-you-feel-environmentally-superior-why-that-may-be-wrong/?noredirect=on&amp;amp;utm_term=.af44bcb67180"&gt;Washington Post article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;DO NOT accept take-out/parcel containers if they are made of
   plastic&lt;/li&gt;
&lt;li&gt;Carry your own containers if you want to get take-out/parcel&lt;/li&gt;
&lt;li&gt;Buy from the local market as much as possible instead of some
  supermarket chains. This is good for the local vegetable sellers
  as you will give him business and for the environment since the
  local markets have limited inventory so there is less wastage
  when things are not sold. Large supermarkets are super-wasteful
  from procurement of the resources to the final selling.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Clothing&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Stay away from synthetic material as much as possible. When
   synthetic material is washed they release tiny micro-filaments
   which then filter their way down to the ocean and accumulate in
   marine
   life. &lt;a href="https://www.theguardian.com/environment/2016/jun/20/microfibers-plastic-pollution-oceans-patagonia-synthetic-clothes-microbeads"&gt;guardian article&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Do not buy clothing online. This single move will reduce the
   amount of waste you generate. Packing of articles bought online
   is almost always useless and it can be easily avoided if we
   just buy clothes from physical shops.&lt;/li&gt;
&lt;li&gt;Buy clothing made from/using sustainable techniques and
   sourcing options.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;DO NOT BUY&lt;/em&gt; clothing. Most of the time when people think
   they need a new article of clothing they probably do not need
   it, they just &lt;em&gt;want&lt;/em&gt; it. Think very hard about if you actually
   need that thing before buying it.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Lifestyle&lt;ol&gt;
&lt;li&gt;Optimize your daily routine so that you can utilize the
   maximum hours of sunlight. &lt;/li&gt;
&lt;li&gt;Switch to energy efficient lighting and cooling solutions&lt;/li&gt;
&lt;li&gt;Avoid the air-conditioner as much as possible&lt;/li&gt;
&lt;li&gt;Avoid plastic/Styrofoam single-use cutlery (spoons, forks
   etc). Buy metal cutlery, they are better and last a long time.&lt;/li&gt;
&lt;li&gt;Avoid Use-And-Throw pens. Instead buy pens that will last a
   long time and are refill-able. If you the kind of person who
   keeps on losing pens then you should aim towards being more
   responsible. I recently purchased a Parker Jotter Steel. It is
   the most expensive pen I own, but I am confident that this pen
   will last me at least 5 years.&lt;/li&gt;
&lt;li&gt;Carry a pen always. Its better than buying one when you need it
   and in some situations you can use a pen as a self-defense
   tool.&lt;/li&gt;
&lt;li&gt;Switch from paper receipts to digital ones.&lt;/li&gt;
&lt;li&gt;You do not need to upgrade your phone that often. &lt;/li&gt;
&lt;li&gt;Bathing everyday is not required.&lt;/li&gt;
&lt;li&gt;Buy things offline as much as possible. This reduces waste in the form of packing material&lt;/li&gt;
&lt;li&gt;Buy shoes based on use and functionality and not design and other superficial qualities.&lt;/li&gt;
&lt;li&gt;Dispose off single use plastics responsibly. Throwing them
    away here and there leads to them filtering down to the oceans
    and messing up the ecological balance in the marine ecosystems
    not to mention cause grievous damage to marine
    life. &lt;a href="https://en.wikipedia.org/wiki/Great_Pacific_garbage_patch"&gt;wiki link&lt;/a&gt;,
    &lt;a href="https://plasticoceans.org/the-facts/"&gt;facts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Carry a reusable water bottle. &lt;/li&gt;
&lt;li&gt;Stop using sanitary napkins. Sanitary napkins are
     non-biodegradable and are very difficult to dispose off
     properly. Instead switch to reusable cloth pads or menstrual
     cups. Check out &lt;a href="http://www.boondh.co/"&gt;BOONDH&lt;/a&gt; for
     information about menstrual cups.&lt;/li&gt;
&lt;li&gt;If you have kids stop using conventional diapers. There are
     very difficult to dispose off properly and are
     non-biodegradable. Instead start using cloth reusable
     nappies.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;That should be it for now. I will add to this whenever I can.&lt;/h3&gt;
&lt;p&gt;This is a very exhaustive list and I will admit that following
everyone of them to the final word is very very difficult and
sometimes the circumstances are just not right, it is okay to
compromise during such scenarios.&lt;/p&gt;
&lt;p&gt;Even though it is hard, there are some communities might be helpful.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/climatechange/"&gt;Reddit Climate Change&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/ZeroWaste/"&gt;Reddit Zero Waste&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.elephantpodcast.org/"&gt;The Elephant Podcast&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Updated on 18th, Aug, 2018&lt;/p&gt;</content><category term="Env"></category><category term="Meta"></category></entry><entry><title>Lambda Calculus - Part 2 - Computation and Lambda Calculus</title><link href="https://signalshore.github.io/blog/Lambda-Calculus-Part-2.html" rel="alternate"></link><published>2018-05-08T00:00:00+05:30</published><updated>2018-05-08T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-05-08:/blog/Lambda-Calculus-Part-2.html</id><summary type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;This is the second part of my Lambda Calculus
series. The
&lt;a href="https://signalshore.github.io/blog/Lambda-Calculus-Part-1.html"&gt;first part&lt;/a&gt; can
be found here. I strongly recommend reading it first before starting off with
this one.&lt;/p&gt;
&lt;h3&gt;What is Computation ?&lt;/h3&gt;
&lt;p&gt;Lambda calculus is formal system for representing computation in
Mathematical Logic. Sit and think about the phrase …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;This is the second part of my Lambda Calculus
series. The
&lt;a href="https://signalshore.github.io/blog/Lambda-Calculus-Part-1.html"&gt;first part&lt;/a&gt; can
be found here. I strongly recommend reading it first before starting off with
this one.&lt;/p&gt;
&lt;h3&gt;What is Computation ?&lt;/h3&gt;
&lt;p&gt;Lambda calculus is formal system for representing computation in
Mathematical Logic. Sit and think about the phrase &lt;em&gt;representing
computation&lt;/em&gt; for a moment.&lt;/p&gt;
&lt;p&gt;What does it mean for something to be computable ?&lt;/p&gt;
&lt;p&gt;Everyday in out lives we use a computer in one form or another,
i.e. computation takes place every single day in numerous ways, but
do we know what computation really is ? &lt;/p&gt;
&lt;p&gt;Gerald Jay Sussman said in SICP (Structure and Interpretation of Computer Programs) and I might be paraphrasing him a bit here:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It's always harder in computer science to talk about what something
means than to go about and do it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;When a computer computes something, what does it actually do ?&lt;/p&gt;
&lt;p&gt;I am sure that we could answer this question with some electronics
based answer and that would in fact be accurate; but, that is not what
we are concerned with here. We are more concerned about the logical
meaning of computation.&lt;/p&gt;
&lt;p&gt;Alan Turing invented the Turing machine which is one of the most
robust models of computation. When we talk about &lt;em&gt;models of
computation&lt;/em&gt; we abstract away all the boring details (like time
complexity and space complexity etc :-P ) and try to deal with the
meaning of computation at a much abstract level.  Alan Turing's Turing
Machine captures the idea of computation in a mechanical sense.&lt;/p&gt;
&lt;p&gt;At the same time (actually before Alan Turing) the logician Alonzo
Church came up with Lambda Calculus to capture the very same thing but in a mathematically formal manner. &lt;/p&gt;
&lt;h3&gt;What is Lambda Calculus&lt;/h3&gt;
&lt;p&gt;Lambda Calculus syntax is very simple. It mainly consists of
expressions (we call them Lambda Expressions), variables, constants
and combinations of all these.&lt;/p&gt;
&lt;p&gt;We will look at the syntax in  CFG form (Context Free Grammar)&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \thinspace\)&lt;/span&gt; &lt;span class="math"&gt;\(:=\)&lt;/span&gt; &lt;span class="math"&gt;\(\thinspace constant\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\qquad \qquad\)&lt;/span&gt; &lt;span class="math"&gt;\(|\)&lt;/span&gt; &lt;span class="math"&gt;\(variable\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\qquad \qquad\)&lt;/span&gt; &lt;span class="math"&gt;\(|\)&lt;/span&gt; &lt;span class="math"&gt;\((expr \space expr)\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\qquad \qquad\)&lt;/span&gt; &lt;span class="math"&gt;\(|\)&lt;/span&gt; &lt;span class="math"&gt;\(( \lambda \thinspace variable.expr)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Now that we have the CFG down. Let us break it down a little bit.
Writing the syntax in the form of a CFG is very beneficial because this
format allows us to define the evaluation of a &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;-calculus
expression in terms of derivations of the CFG. We will see that in a
bit.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The first rule states that any &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;-calculus expression can be
replaced with a constant. Constants can be anything; from numbers like
&lt;strong&gt;0&lt;/strong&gt; or &lt;strong&gt;1&lt;/strong&gt; to even other &lt;strong&gt;functions&lt;/strong&gt; (yeah!!)&lt;/li&gt;
&lt;li&gt;The second rule states that &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;-calculus expression can be
  replaced with a variable. A variable are names like &lt;strong&gt;x&lt;/strong&gt; or &lt;strong&gt;y&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;The third rule allows us to apply one expression to another
  expression. This rule capture the idea of function application.&lt;/li&gt;
&lt;li&gt;The fourth and the final rules gives is the &lt;strong&gt;Lambda notation&lt;/strong&gt;. This is notation that allows us to bind variables to expression (the variables names in rule 2 work because of this)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;strong&gt;Observation&lt;/strong&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Rule 3 allows us to apply one expression to another expression &lt;strong&gt;only&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Rule 4 allows use to define functions that have &lt;em&gt;only&lt;/em&gt; one variable.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;A very simple  &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;-expression&lt;/h3&gt;
&lt;p&gt;Let us consider the lambda expression &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\lambda x . ((+ 1) x)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This is quite a tedious form of writing this expression and we can simplify this quite a lot. The simplified version looks like this.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\lambda x . (+ 1 \thinspace x )\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observe&lt;/strong&gt; that in the second form we have one function &lt;em&gt;+&lt;/em&gt; applied to two arguments - &lt;em&gt;1&lt;/em&gt; and &lt;em&gt;x&lt;/em&gt;. This is not actually allowed according to the rules but they mean the the same things. &lt;/p&gt;
&lt;p&gt;Evaluating this expression we perform simple substitutions according to the rules of the CFG (for this we will use leftmost derivations).&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda variable . expr)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . expr)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . (expr \space expr))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . ((expr \space expr) \space expr))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . ((constant \space expr) \space expr))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . ((constant \space constant) \space expr))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . ((+ \space 1) \space expr))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . ((+ \space 1) \space variable))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr \Rightarrow (\lambda x . ((+ \space 1) \space x))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Observe&lt;/strong&gt; that the derivation that the $\lambda&amp;amp; expression returns is actually a &lt;em&gt;function&lt;/em&gt;. This function needs to applied to a variable to get something useful happening out of it. &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\((\lambda x . (+ 1 x )5) := (+ \space 1 \space 5) := 6\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In Scheme this would be something like this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The Abstraction Operator&lt;/h3&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt; (lambda) is the abstraction operator used in Lambda Calculus.&lt;/p&gt;
&lt;p&gt;In any &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;-expression there are two kinds of variables. &lt;strong&gt;Free&lt;/strong&gt; and &lt;strong&gt;Bound&lt;/strong&gt; variables.&lt;/p&gt;
&lt;p&gt;Consider the following expression&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\((\lambda x. (+ \space x \space y \space y \space x))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(x\)&lt;/span&gt; is a bound variable and &lt;span class="math"&gt;\(y\)&lt;/span&gt; is a free variable. &lt;/p&gt;
&lt;p&gt;The abstraction operator binds a variable with the body of the
abstraction. Thus a variable that falls within the scope of the
abstraction is called a &lt;em&gt;bound&lt;/em&gt; variable. All other variables are
&lt;em&gt;free&lt;/em&gt; variables.&lt;/p&gt;
&lt;p&gt;In the given example variable &lt;span class="math"&gt;\(x\)&lt;/span&gt; is bound to the expression &lt;span class="math"&gt;\((+
\space x \space y \space y \space x)\)&lt;/span&gt;. Thus when this function is
being evaluated with an argument then all the occurrences of &lt;span class="math"&gt;\(x\)&lt;/span&gt; in the
expression will be replaced by the argument.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(((\lambda x. (+ \space x \space y \space y \space x)) 5) = (+ \space 5 \space y \space  y \space 5)\)&lt;/span&gt;&lt;/p&gt;
&lt;h3&gt;Currying&lt;/h3&gt;
&lt;p&gt;Rule 4 states that we can have function definitions only in the form of &lt;span class="math"&gt;\(expr := (\lambda variable . expr)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Thus this means that in the lambda calculus model we can have
functions with only one variable. However, as we will see that this is
not a limitation, in fact it is quite the opposite as it opens up new
possibilities about what you can do with your programming language.&lt;/p&gt;
&lt;p&gt;Currying is a technique that lets us translate functions that take
multiple arguments to a sequence of functions that accept only a
single argument. This is useful in &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt;-calculus because this
allows us to define complex functions that take multiple arguments and
still not disturb the 4th Rule.&lt;/p&gt;
&lt;p&gt;For example, consider the expression &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr := (\lambda x \thinspace y. \thinspace (+ \thinspace x \thinspace y))\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;This function will take two arguments &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr := ((\lambda x \thinspace y. \thinspace (+ \thinspace x \thinspace y))3 \thinspace 5)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In this expression the abstraction operator will take the first variable (i.e. &lt;span class="math"&gt;\(x\)&lt;/span&gt;) and substitute all the occurrences of &lt;span class="math"&gt;\(x\)&lt;/span&gt; in the expression with the value of the first argument (i.e. &lt;span class="math"&gt;\(3\)&lt;/span&gt;). This will also happen for the second variable and we will have the expression &lt;span class="math"&gt;\((+ \thinspace 3 \thinspace 5)\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;Actually the expression &lt;span class="math"&gt;\(expr := ((\lambda x \thinspace y. \thinspace
(+ \thinspace x \thinspace y))3 \thinspace 5)\)&lt;/span&gt; is just the curried
version of the expression;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr := ((\lambda x (\lambda y. \thinspace (+ \thinspace x \thinspace y))3 )\thinspace 5)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The derivation of this expression,&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr := ((\lambda x (+ \thinspace x \thinspace 3)\thinspace 5)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(expr := (+ \thinspace 5 \thinspace 3)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Currying is not just a technique used in Lambda Calculus. It is used
in a lot of different fields of mathematics logic. Just have a look at
the Wikipedia page
for &lt;a href="https://en.wikipedia.org/wiki/Currying"&gt;Currying&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Currying is named after Haskell Curry. (The Haskell programming languages is also named after him)&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="CS"></category></entry><entry><title>Savandurga Trek</title><link href="https://signalshore.github.io/blog/Savandurga-Trek.html" rel="alternate"></link><published>2018-04-10T00:00:00+05:30</published><updated>2018-04-10T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-04-10:/blog/Savandurga-Trek.html</id><summary type="html">&lt;p&gt;I came to know about Savandurga Hill a couple of weeks back when me and my friend went there for a casual ride (motorcycle). When we went there the trekking part of the hill was already closed. This was okay since both of us did not plan on trekking anyway …&lt;/p&gt;</summary><content type="html">&lt;p&gt;I came to know about Savandurga Hill a couple of weeks back when me and my friend went there for a casual ride (motorcycle). When we went there the trekking part of the hill was already closed. This was okay since both of us did not plan on trekking anyway. &lt;/p&gt;
&lt;p&gt;However I was hooked by the moment I saw the hill. It is mind-blowing. So after I returned I tried to convince my friends to come along with me, but that did not happen. So I decided to ride to Savandurga and come back. &lt;/p&gt;
&lt;p&gt;This turned out to be an amazing idea.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;The Route&lt;/h2&gt;
&lt;p&gt;My initial route plan was to just ride to Savandurga Hill on the Magdi road and come back via the same route as well. However while researching for the route and I came across this page. This page is a route information by the IISc Randonneurs group. Though group does not organize any events anymore the page still exists. &lt;/p&gt;
&lt;p&gt;So my effective route would be :&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Home&lt;/li&gt;
&lt;li&gt;T.G. Halli Reservoir (33 km)&lt;/li&gt;
&lt;li&gt;Savandurga Hill (29 km)&lt;/li&gt;
&lt;li&gt;Manchanbele Dam (13 km)&lt;/li&gt;
&lt;li&gt;ISRO Deep Space Network (6 km) &lt;/li&gt;
&lt;li&gt;Dodda Alada Mara (4 km)&lt;/li&gt;
&lt;li&gt;Home (26 km)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Total Distance: 111 km &lt;/p&gt;
&lt;p&gt;I have divided the trip into three parts.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Part A - Going to Savandurga&lt;/li&gt;
&lt;li&gt;Part B - Trekking &lt;/li&gt;
&lt;li&gt;Part C - Returning&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h2&gt;Part A - Going to Savandurga&lt;/h2&gt;
&lt;p&gt;This part was fairly straightforward. I left home at about 6:30. I started late because I wanted to not-cycle during the 4 hour intense heat window from 1100 hrs to 1500 hrs. &lt;/p&gt;
&lt;p&gt;After riding on the outer ring road for some time I had to take some detour because I had missed my entry to Magdi Road. Once I was on Magdi Road it was okay-ish. Magdi Road is narrow but at least the road is smooth to ride on. &lt;/p&gt;
&lt;p&gt;Once you start approaching the T.G. Halli reservoir the road begins to get really nice with curves and its just amazing to ride in these roads. Also traffic is very less.&lt;/p&gt;
&lt;p&gt;I stopped on the way many times to click photos. &lt;/p&gt;
&lt;p&gt;I reached Savandurga around 0930 hrs. This was just over 3 hours of continuous cycling. &lt;/p&gt;
&lt;p&gt;Surprisingly I met a bunch of classmates from college who were having some family festival at a temple right in the foot of the hill. They invited me to have lunch with them when I come back and also allowed to keep my bicycle in their house. This was a welcome change to the trip plan. :-)&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Some photos&lt;/h4&gt;
&lt;p&gt;&lt;img alt="somewhere on Magdi Road" src="/assets/images/2018-04-10/A1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="somewhere on Magdi Road" src="/assets/images/2018-04-10/A2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="somewhere on Magdi Road" src="/assets/images/2018-04-10/A3.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Part B - Trekking&lt;/h2&gt;
&lt;p&gt;This was my first time to Savandurga so I had no idea about what to expect and what not to expect. So with a clear head I approached the base of the hill. To my surprise the hill is marked with white arrows that show you the way around the hill to the top. Even though the route was marked around the hill the climb was in no way easier. &lt;/p&gt;
&lt;p&gt;In some places the climb was as easy as walking on an inclined plane, however in some places the hill was so steep that they had to chisel away footholds on the rock so that climbing was easier. &lt;/p&gt;
&lt;p&gt;I reached the top at 1200 hrs after about 2 hours of trekking. The Manchanbele Dam reservoir was always visible in the background while climbing. The view from top was just amazing. I took a lot of photos (I wish I had a better camera :-P) from different heights while climbing. I drank a bottle of ORS and a pack of biscuits (free carbs) and some bananas during the climb. &lt;/p&gt;
&lt;p&gt;I also asked a bunch of strangers to click photos of myself (I think a total of three people and 6 photos). Meeting new people is always fun :-)&lt;/p&gt;
&lt;p&gt;During the climb I was surprised to see the local people climbing the hill barefoot. I was inspired by that and I tried climbing the hill barefoot too. It was interesting and different and painful. Once I reached the top the quickly put on my shoes for the descent back.&lt;/p&gt;
&lt;p&gt;In the top there was this woman who had come with her family and she was scared that I would jump from the edge. I heard her scream at me "come back from the edge" when I was standing a bit too close to the edge. She even asked me if I had come by myself or not. I guess people are not used to seeing people coming to Savandurga all by themselves and not jumping off the top of the hill. &lt;/p&gt;
&lt;p&gt;I stayed on top for about half an hour and started my descent back at 1230 hrs reaching the base around 1330 hours. &lt;/p&gt;
&lt;p&gt;Before starting the next leg of the trip I waited at my friends place for about 2 hours and had a delicious lunch. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;Some photos&lt;/h4&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/B1.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;This is me at the bottom of the hill. :-)&lt;/h6&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/B2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/B3.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/B4.jpg"&gt;
&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h4&gt;These are from the very top of the hill. :-)&lt;/h4&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/Btop1.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;That is the temple on the top of the hill&lt;/h6&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/Btop2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="on the hill" src="/assets/images/2018-04-10/Btop3.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;That is the Manchanbele Dam reservoir in the distance&lt;/h6&gt;
&lt;hr&gt;
&lt;h2&gt;Part C - Returning&lt;/h2&gt;
&lt;p&gt;I left Savandurga around 1530 hrs and I cycled for about half an hour before I reached Manchanbele Dam. The road from Savandurga to Manchanbele dam is a very narrow single lane road with dense forests on both sides. This is by far the best road I have ever ridden on. &lt;/p&gt;
&lt;p&gt;Due to some reason the dam was not open that day, however I could still get some photos of the dam and spillway. &lt;/p&gt;
&lt;p&gt;The Dam was the lowest point of the trip and while returning and it took a lot of energy to climb back up. Sometimes I stopped and pushed the cycle up a hill (this is not cheating since there are no rules :-P ).&lt;/p&gt;
&lt;p&gt;I was enjoying the riding so I decided to skip the IDSN and Dodda Alada Mara and cycle directly to the Outer Ring Road and then follow the Outer Ring Road to my home. This is fairly uneventful but at least the road was nice. I stopped in the way to have tender coconut. These are really great fruits. :-)&lt;/p&gt;
&lt;p&gt;I reached my home at about 1800 hrs. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
&lt;img alt="on the way to Manchanbele" src="/assets/images/2018-04-10/C1.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;The narrow twisty road to Manchanbele Dam. (it was really blissful)&lt;/h6&gt;
&lt;p&gt;&lt;img alt="the dam itself" src="/assets/images/2018-04-10/C2.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;The Dam itself!!&lt;/h6&gt;
&lt;p&gt;&lt;img alt="the reservoir" src="/assets/images/2018-04-10/C3.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Aftermath&lt;/h2&gt;
&lt;p&gt;Even though the trip covered somewhat less distance than my previous trips, I think this trip was lot more straining than the previous ones. &lt;/p&gt;
&lt;p&gt;I think I injured my right leg somewhere, I can not put too much pressure on it and it hurts every time I try to lift it. 
Other than that my shoulders hurt and my back hurts too. &lt;/p&gt;
&lt;p&gt;Other than this.. the trip was amazing. :-)&lt;/p&gt;</content><category term="Cycling"></category><category term="Travel"></category></entry><entry><title>GNU Guix - Part 1</title><link href="https://signalshore.github.io/blog/GUIX-Part-1.html" rel="alternate"></link><published>2018-03-19T00:00:00+05:30</published><updated>2018-03-19T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-03-19:/blog/GUIX-Part-1.html</id><summary type="html">&lt;p&gt;I was considering the idea of moving to GNU GuixSD as my full time operating system for a long time. I tried GuixSD for some time but I gave up because I was frustrated with the config system. (I was un-doubtedly stupid back then)&lt;/p&gt;
&lt;h2&gt;That was then, This is now …&lt;/h2&gt;</summary><content type="html">&lt;p&gt;I was considering the idea of moving to GNU GuixSD as my full time operating system for a long time. I tried GuixSD for some time but I gave up because I was frustrated with the config system. (I was un-doubtedly stupid back then)&lt;/p&gt;
&lt;h2&gt;That was then, This is now&lt;/h2&gt;
&lt;p&gt;I have finally transitioned to using Guix full time. In fact this essay is from my GUIX system itself. In this essay I will outline &lt;strong&gt;couple&lt;/strong&gt; of things that I found to be a bit difficult for an absolute beginner and a &lt;strong&gt;lot&lt;/strong&gt; of things that I find totally awesome and exciting about GNU Guix. &lt;/p&gt;
&lt;h3&gt;What is GNU Guix ?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/software/guix/"&gt;GNU Guix&lt;/a&gt; is a package manager. But, make no mistake, it is not a traditional package manager. It is a package manager on steroids. I will explain what I mean by &lt;em&gt;on steroids&lt;/em&gt;. &lt;/p&gt;
&lt;p&gt;Some of the most important and most powerful features of the Guix package manager IMHO are ...&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The gnu store (&lt;code&gt;/gnu/store/&lt;/code&gt;)&lt;/strong&gt; is heart of the Guix package manager. This is the directory where all the packages and profile are stored in Guix. Unlike traditional package managers where the packages are stored in either &lt;code&gt;/bin&lt;/code&gt; or &lt;code&gt;/usr/bin/&lt;/code&gt; or anything, in Guix all the packages that are installed are installed under the &lt;code&gt;/gnu/store/&lt;/code&gt; directory and the entire system is a web of symbolic links.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Per-user profiles&lt;/strong&gt; In guix packages are not installed globally. Traditionally in GNU/Linux when some package is installed it is available for use by everyone in the system with no exceptions. This makes sense because traditionally the packages are installed in the file-system itself, so there is no way of separating which user has which package. &lt;/p&gt;
&lt;p&gt;Things are quite different on the Guix Land (I apologize to the community for using &lt;em&gt;Guix Land&lt;/em&gt;(I couldn't help myself)). In Guix, packages are managed using per-user profiles. This means that every user on the system has their own profile which makes sure that they have the packages that they want to use and nothing else. This also means that in guix installing packages does not need superuser privileges, since everyone can have authority over which packages they want to use. How Guix accomplishes this by using a series of symbolic links the actual binaries which reside in the Gnu Store. So if two users have different packages then it means that they just have different symbolic links pointing to the actual binaries in the gnu store. Same goes for different users having different versions of the same package.&lt;/p&gt;
&lt;p&gt;The per-user-profiles are stored under the directory &lt;code&gt;~/.guix-profile&lt;/code&gt; &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Purely Functional&lt;/strong&gt; approach to package management. A &lt;a href="https://en.wikipedia.org/wiki/Pure_function"&gt;pure function&lt;/a&gt; is a function that produces the same output &lt;em&gt;every-time&lt;/em&gt; given the same set of arguments. Guix embraces this idea. Every package build in guix is treated as a function in which the inputs are the compiler, libraries, build scripts, etc and the output is the built package. This along with isolated build environment (I don't know much about it as I haven't had time to explore it yet) ensures that built packages are bit-identical even when they are built on different machines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Transactional Upgrades and Rollbacks&lt;/strong&gt; Guix package upgrades are transactional in nature, this means that either the entire upgrade takes place or nothing gets upgraded so in case of a power-failure during upgrade, your system will not be left in a corrupt state. &lt;/p&gt;
&lt;p&gt;Also package upgrades, installs etc can be rolled back (yes! just like in git!!)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Guile&lt;/strong&gt; Guix is completely written in GNU Guile which is a dialect of LISP. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are lots of more fun stuff that I could write about but &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;I haven't explored the system enough to talk about it in detail and I do not want to speculate at this point&lt;/li&gt;
&lt;li&gt;Things will get really long.. really fast&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;What is GuixSD ?&lt;/h2&gt;
&lt;p&gt;&lt;s&gt;GuixSD is the Linux Based Operating system built around the GUIX package manager.&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/software/guix/"&gt;GuixSD&lt;/a&gt; or the Guix System Distribution is an advanced distribution of the GNU operating system developed by the GNU Project—which respects the freedom of computer users. &lt;/p&gt;
&lt;p&gt;That is what it says on their main website. I don't know much but the core idea of GuixSD is that there should be a configuration file in which users will be able to specify the &lt;em&gt;final&lt;/em&gt; state the installed system and the installer should be intelligent enough to figure out how to do that. &lt;/p&gt;
&lt;p&gt;This is in addition to the philosophies of the GNU community and Free and Open Source Software. GuixSD runs the Libre Linux Kernel.&lt;/p&gt;
&lt;h2&gt;Installing Guix&lt;/h2&gt;
&lt;p&gt;You can follow
the
&lt;a href="https://www.gnu.org/software/guix/manual/html_node/System-Installation.html#System-Installation"&gt;instructions&lt;/a&gt; on
the main Guix page. They are quite good. Over here I will highlight
certain key ideas.&lt;/p&gt;
&lt;p&gt;The installation was quite simple actually involving 3 major steps&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Setting up Networking :&lt;/strong&gt; Once you boot into the live USB you are required to set up networking because the installation process will download the required files over the internet.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Disk Partitioning :&lt;/strong&gt; This part is actually quite tricky to get right especially if you are using a UEFI system. 
    During this step one is required to mount the target file system under /mnt and then mount the other related file-systems relative to &lt;code&gt;/mnt&lt;/code&gt;. This means that if you want to have a custom boot dir then you would have to mount it at &lt;code&gt;/mnt/boot&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;On the contrary if you are using a UEFI system then you are required to have an esp (efi system partition) and you have to mount it at &lt;code&gt;/boot/efi&lt;/code&gt;. This mount point should &lt;strong&gt;not&lt;/strong&gt; be relative. i.e. you should not mount the esp at &lt;code&gt;/mnt/boot/efi&lt;/code&gt; but instead at &lt;code&gt;/boot/efi&lt;/code&gt;. This was weird for me and this caused a lot of trouble for me.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Final installation&lt;/strong&gt; In this step we configure our system and install it.
    The guix &lt;a href="https://www.gnu.org/software/guix/manual/html_node/Using-the-Configuration-System.html#Using-the-Configuration-System"&gt;System Configuration&lt;/a&gt; is the most important thing to get right while installing Guix. This file is responsible for setting up the entire system including users, groups, and services (guix uses &lt;a href="https://www.gnu.org/software/shepherd/"&gt;Gnu Shepherd&lt;/a&gt; as the service manager)&lt;/p&gt;
&lt;p&gt;This config file is nothing but a Scheme file which is read by the Guix package manager when you are installing the system. &lt;/p&gt;
&lt;p&gt;The
&lt;a href="https://www.gnu.org/software/guix/manual/html_node/Using-the-Configuration-System.html#Using-the-Configuration-System"&gt;default configurations&lt;/a&gt; that
are provided are quite good for normal everyday use. If however you
need to use a more complex configuration you can refer
to
&lt;a href="https://gitlab.com/83bytes/guix/blob/master/myConfig.scm"&gt;my configuration&lt;/a&gt; (my
config is a dual-booted uefi setup with Arch Linux)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; In Guix if you are dual-booting please make sure that the bootloader is installed properly since if it is not, you &lt;strong&gt;CAN NOT&lt;/strong&gt; use the traditional fixes that we are used to (like bootrepair, or grub reinstall etc) because of how the GuixSD system is structured internally.&lt;/p&gt;
&lt;h2&gt;After Installation&lt;/h2&gt;
&lt;p&gt;So, installation is only half the trouble. After installation comes the important part of actually using the system. 
In this section I have put together a list of things that should be essential to a smooth start.&lt;/p&gt;
&lt;h3&gt;Per-User profile&lt;/h3&gt;
&lt;p&gt;In the previous section we talked about how you guix maintain packages on a per-user basis. One easy method to maintain per user profiles is to create a manifest file. A manifest file is a scheme file that contains all the packages for a specific user. This way you can specify only the packages that you want to be available globally in the system configuration file and other packages can be installed on a per-user basis using the manifest file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;#bash
$ guix package -m profile.scm
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will tell guix package to install the packages from that file. &lt;/p&gt;
&lt;p&gt;Manifest file syntax:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;use-package-modules&lt;/span&gt; &lt;span class="nv"&gt;&amp;lt;module1&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;&amp;lt;module2&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;package-&amp;gt;manifest&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;list &lt;/span&gt;&lt;span class="nv"&gt;package1&lt;/span&gt;
          &lt;span class="nv"&gt;package2&lt;/span&gt;
          &lt;span class="nv"&gt;package3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Package modules are the basically the scheme files within which each of the packages are defined. 
You can find out which package module a given package belongs to by running the &lt;code&gt;guix package -s &amp;lt;package-name&amp;gt;&lt;/code&gt; command and looking at the &lt;em&gt;location&lt;/em&gt; field.&lt;/p&gt;
&lt;p&gt;Here is &lt;a href="https://gitlab.com/83bytes/guix/blob/master/myConfig.scm"&gt;my Profile.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For example: this is the output of the command &lt;code&gt;guix package -s emacs-neotree&lt;/code&gt;&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ guix package -s emacs-neotree
name: emacs-neotree
version: &lt;span class="m"&gt;0&lt;/span&gt;.5.2
outputs: out
systems: x86_64-linux i686-linux armhf-linux aarch64-linux mips64el-linux
dependencies: 
location: gnu/packages/emacs.scm:4474:2
homepage: https://github.com/jaypei/emacs-neotree
license: GPL &lt;span class="m"&gt;3&lt;/span&gt;+
synopsis: Folder tree view &lt;span class="k"&gt;for&lt;/span&gt; Emacs  
description: This Emacs package provides a folder tree view.
relevance: &lt;span class="m"&gt;4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The file under &lt;em&gt;gnu/packages/&lt;/em&gt; is the module name.&lt;/p&gt;
&lt;h3&gt;Updating and maintaining&lt;/h3&gt;
&lt;p&gt;Updating the GuixSD done through the command &lt;code&gt;guix pull&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;guix pull will result in Guix pulling all the new changes from the repo and building them locally. This generally takes a long time. &lt;/p&gt;
&lt;p&gt;Once this is done then we can run &lt;code&gt;guix system reconfigure &amp;lt;config file&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Running &lt;code&gt;guix pull&lt;/code&gt; as a normal user will NOT habe any effect on running &lt;code&gt;guix system reconfigure&lt;/code&gt; as root&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;guix pull&lt;/code&gt; can be run as a non root user. However &lt;code&gt;guix system reconfigure&lt;/code&gt; must be run as root. Hence when you want to upgrade the system, run &lt;code&gt;guix pull&lt;/code&gt; and &lt;code&gt;guix system reconfigure&lt;/code&gt; as root. This will ensure that the whole system is upgraded at once.&lt;/p&gt;
&lt;p&gt;This command will again take the config file and reset Guix to the state described in the config file. &lt;/p&gt;
&lt;p&gt;After this we can again use &lt;code&gt;guix package -m &amp;lt;profile file&amp;gt;&lt;/code&gt; to get the updated packages into the user profile.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;That should be it for now. I know I am not posting regularly. I was very busy recently. However things are clearing up and I think I will write another essay about Lambda Calculus and Internals of Guix very soon (not &lt;em&gt;so&lt;/em&gt; soon!!)!! &lt;/p&gt;
&lt;p&gt;:-)&lt;/p&gt;</content><category term="CS"></category><category term="Guix"></category></entry><entry><title>Lambda Calculus - Part 1</title><link href="https://signalshore.github.io/blog/Lambda-Calculus-Part-1.html" rel="alternate"></link><published>2018-02-17T00:00:00+05:30</published><updated>2018-02-17T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-02-17:/blog/Lambda-Calculus-Part-1.html</id><summary type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus"&gt;Lambda Calculus&lt;/a&gt; is a beautiful thing in Computer Science. &lt;/p&gt;
&lt;p&gt;With this post I will try to motivate and inspire the beauty of Lambda Calculus and impress upon the reader the implications of it.&lt;/p&gt;
&lt;p&gt;This will just be a very very basic overview of Lambda Calculus. I can not write an …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus"&gt;Lambda Calculus&lt;/a&gt; is a beautiful thing in Computer Science. &lt;/p&gt;
&lt;p&gt;With this post I will try to motivate and inspire the beauty of Lambda Calculus and impress upon the reader the implications of it.&lt;/p&gt;
&lt;p&gt;This will just be a very very basic overview of Lambda Calculus. I can not write an in-depth post because firstly I want to motivate the inspiration in the reader and secondly I have not completely understood some of the greater intricacies of Lambda Calculus.&lt;/p&gt;
&lt;h2&gt;Introduction - Lambda Calculus&lt;/h2&gt;
&lt;p&gt;To put in simply Lambda Calculus is the worlds smallest, universal programming language.&lt;/p&gt;
&lt;p&gt;Lambda Calculus is a formal system of mathematical logic that is used for expressing computation. This is a universal model of computation that can be used to encode any Turing Machine algorithm. It was first established by logician &lt;a href="https://en.wikipedia.org/wiki/Alonzo_Church"&gt;Alonzo Church&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Alan_Turing"&gt;Alan Turing&lt;/a&gt; and Alonzo Church showed that a Turing Machine and Lambda Calculus model are equally powerful models of computation. This is the famous &lt;a href="https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis"&gt;Church-Turing thesis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let us learn about Lambda Calculus by describing it as a programming Language that we are designing.&lt;/p&gt;
&lt;h2&gt;Building Blocks of lambda calculus.&lt;/h2&gt;
&lt;p&gt;All valid Lambda Calculus Expressions are called Lambda terms. Any valid Lambda Calculus expression can be constructed using just three building blocks. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Variables&lt;/strong&gt; - The smallest independent entity that one can think of. This has to be valid lambda term.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x,y,x etc are all valid Variables. A Variable does not need to mean anything. Currently the variables x,y,z mean nothing.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Method of Abstraction&lt;/strong&gt; - A way to bind lambda expression to names, so that they can be referred to easily. Lambda Calculus allows us to bind variables to expressions. This allows us to create functions in Lambda calculus. The &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt; (lambda) and the /./ (dot) symbols are used to create abstraction.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\lambda\)&lt;/span&gt; x.E&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this example the expression &lt;span class="math"&gt;\(E\)&lt;/span&gt; is bound to &lt;span class="math"&gt;\(x\)&lt;/span&gt;. This allows us apply these functions to arguments. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Method of Application&lt;/strong&gt; - Now that we can create functions, what else can we do with them ? We can apply them. Lambda calculus allows us to apply functions to other expressions. The &lt;span class="math"&gt;\(()\)&lt;/span&gt; symbols are used to indicate applications of functions. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus_definition"&gt;Mathematically&lt;/a&gt;&lt;/strong&gt;, Lambda Expressions are composed of &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;variables&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;abstraction symbols &lt;span class="math"&gt;\(\lambda\)&lt;/span&gt; and &lt;em&gt;.&lt;/em&gt; (dot)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;parenthesis &lt;span class="math"&gt;\(()\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A set of valid Lambda Expressions &lt;span class="math"&gt;\(\Lambda\)&lt;/span&gt; can be defined recursively as..&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;If &lt;span class="math"&gt;\(x\)&lt;/span&gt; is a variable, then &lt;span class="math"&gt;\(x \in \Lambda\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;If &lt;span class="math"&gt;\(x\)&lt;/span&gt; is a variable and &lt;span class="math"&gt;\(M \in \Lambda\)&lt;/span&gt;, then &lt;span class="math"&gt;\(( \lambda x. M ) \in \Lambda\)&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;If  &lt;span class="math"&gt;\(M, N \in \Lambda\)&lt;/span&gt;, then &lt;span class="math"&gt;\((M N) \in \Lambda\)&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Rule 2&lt;/strong&gt; represents the idea of abstraction and is called &lt;strong&gt;Lambda-abstraction&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rule 3&lt;/strong&gt; represents the idea of application and is called &lt;strong&gt;application&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The lambda abstraction &lt;span class="math"&gt;\(\lambda x.M\)&lt;/span&gt; defines an anonymous function that takes &lt;span class="math"&gt;\(x\)&lt;/span&gt; as input argument and maps it to &lt;span class="math"&gt;\(M\)&lt;/span&gt;. Thus the function &lt;span class="math"&gt;\(f(x) = x + 1\)&lt;/span&gt; is &lt;span class="math"&gt;\(\lambda x . x + 1\)&lt;/span&gt;, where &lt;span class="math"&gt;\(M\)&lt;/span&gt; is &lt;span class="math"&gt;\(x+1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The application is equivalent to calling function &lt;span class="math"&gt;\(M\)&lt;/span&gt; on input &lt;span class="math"&gt;\(N\)&lt;/span&gt; i.e. &lt;span class="math"&gt;\(M(N)\)&lt;/span&gt;&lt;/p&gt;
&lt;h2&gt;How to run Lambda Calculus programs ?&lt;/h2&gt;
&lt;p&gt;Now we have seen how Lambda calculus expressions can be formed. In this section we will see how Lambda calculus expressions can be reduced. This is also equivalent to saying "How can we run lambda calculus programs ?"&lt;/p&gt;
&lt;p&gt;There are multiple reduction rules, but the most important and the most relevant one is the &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;-reduction. &lt;span class="math"&gt;\(\beta\)&lt;/span&gt;-reduction is defined in terms of substitution rules. This rule captures the idea of function application. &lt;/p&gt;
&lt;p&gt;The &lt;span class="math"&gt;\(\beta\)&lt;/span&gt; reduction rule states that in an expression of the form &lt;span class="math"&gt;\((\lambda x.t)v\)&lt;/span&gt; we replace all the occurrences of &lt;span class="math"&gt;\(x\)&lt;/span&gt; in &lt;span class="math"&gt;\(t\)&lt;/span&gt; with &lt;span class="math"&gt;\(v\)&lt;/span&gt;.&lt;/p&gt;
&lt;h4&gt;Examples&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\((\lambda  x. x^2)5 \thinspace := \thinspace 5^2 \thinspace := \thinspace 25\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(((\lambda x. \lambda y. x + y)\thinspace 5 \thinspace 4) \thinspace:= \thinspace 5 + 4 \thinspace := \thinspace 9\)&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Church Encoding&lt;/h2&gt;
&lt;p&gt;Now that we have a working programming language that allows us to define functions and apply functions what else can we do with this language ?&lt;/p&gt;
&lt;p&gt;We realize that to do any sort of meaningful work with this language we need to define numbers and arithmetic operations in this language.&lt;/p&gt;
&lt;p&gt;This is where Church Encoding comes into play. It is a method of encoding numbers and operations in the Lambda calculus. It is meant to illustrate that you can have mathematical operations purely in terms of functions and abstractions without defining any mathematical primitives.&lt;/p&gt;
&lt;p&gt;Under Church Encoding we have a bunch of different formats. Over here we will be discussing only two of them.&lt;/p&gt;
&lt;h2&gt;Church Numerals&lt;/h2&gt;
&lt;p&gt;The basic idea of church numerals is to use multiple applications of a function to represent numbers and the number of times the function is applied is equal the number that the lambda expression represents.&lt;/p&gt;
&lt;p&gt;Starting with the number &lt;span class="math"&gt;\(0\)&lt;/span&gt; where the function is not applied even once. We define zero as &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(0\thinspace := \thinspace  \lambda \thinspace f. \thinspace \lambda x.\thinspace x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(1\thinspace := \thinspace \lambda \thinspace f. \thinspace \lambda x. fx\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(2\thinspace := \thinspace \lambda \thinspace f. \thinspace \lambda x. f(fx)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Successor Function&lt;/h3&gt;
&lt;p&gt;We define the successor function as &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S := \lambda n. \thinspace \lambda f.\thinspace \lambda x.\thinspace f \thinspace ( \thinspace n \thinspace f \thinspace x \thinspace )\)&lt;/span&gt; &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Application&lt;/h3&gt;
&lt;p&gt;Now, we can confirm the working of this setup by applying the successor function to the definition of &lt;span class="math"&gt;\(0\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S0 := (\lambda n. \lambda f. \lambda x. f \thinspace (n \thinspace f \thinspace x))( \lambda f. \lambda x. \thinspace x)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S0 := \lambda f. \lambda x. \thinspace f(( \lambda f. \lambda x. x) f x)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S0 := \lambda f. \lambda x. fx\)&lt;/span&gt;, which is &lt;span class="math"&gt;\(1\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Similarly, we can define &lt;span class="math"&gt;\(2\)&lt;/span&gt; by applying the successor function to &lt;span class="math"&gt;\(0\)&lt;/span&gt; twice &lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S2 := S(S0)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S2 := (\lambda n. \lambda f. \lambda x. f \thinspace (n \thinspace f \thinspace x))( \lambda f. \lambda x. f \thinspace x)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S2 := \lambda f. \lambda x. f((\lambda f. \lambda x. fx)fx)\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(S2 := \lambda f. \lambda x. f(fx)\)&lt;/span&gt;, which is &lt;span class="math"&gt;\(2\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;So, right now in this programming language we have the ability to use numbers.&lt;/p&gt;
&lt;h2&gt;Church Boolean&lt;/h2&gt;
&lt;p&gt;We can define Boolean values (True and False) quite simple using church Encoding. The way these Boolean values are defines is very intriguing.&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(T := \lambda x. \lambda y. x\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(F := \lambda x. \lambda y. y\)&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Basically, &lt;span class="math"&gt;\(T\)&lt;/span&gt; is defined as a function that takes in two arguments and returns the first one and &lt;span class="math"&gt;\(F\)&lt;/span&gt; is defined as a function that takes in two arguments and returns the second one.&lt;/p&gt;
&lt;p&gt;What is surprising is that we can define all logical operations using a clever combination of these functions.    &lt;/p&gt;
&lt;h3&gt;Boolean Operations&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\wedge := \lambda x. \lambda y. x y (\lambda u. \lambda v. v) := \lambda x. \lambda y. x y F\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\wedge M N := (\lambda x. \lambda y. x y F) M N := M N F\)&lt;/span&gt;
&lt;hr&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\vee := \lambda x. \lambda y. x (\lambda u. \lambda v. u) y := \lambda x. \lambda y. x T y\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\vee M N := (\lambda x. \lambda y. x T y) M N := M T N\)&lt;/span&gt;
&lt;hr&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span class="math"&gt;\(\neg := \lambda x. x (\lambda u. \lambda v. v) (\lambda p. \lambda q. p) := \lambda x. x F T\)&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="math"&gt;\(\neg M := (\lambda x. x F T)M := M F T\)&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;br&gt;
In the previous equations replace &lt;span class="math"&gt;\(M\)&lt;/span&gt; and &lt;span class="math"&gt;\(N\)&lt;/span&gt; with any Boolean you want (either &lt;span class="math"&gt;\(T\)&lt;/span&gt; or &lt;span class="math"&gt;\(F\)&lt;/span&gt;) and then evaluate the resulting expression. &lt;/p&gt;
&lt;p&gt;For Example for the equation 1. we can have &lt;span class="math"&gt;\(M = T\)&lt;/span&gt; and &lt;span class="math"&gt;\(N = F\)&lt;/span&gt;, which makes the equation&lt;/p&gt;
&lt;p&gt;&lt;span class="math"&gt;\(M N F := T F F := (\lambda x. \lambda y. x) F F := F\)&lt;/span&gt; &lt;em&gt;(because T takes in two inputs and chooses the first one)&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Thus an &lt;span class="math"&gt;\(AND\)&lt;/span&gt; operation on &lt;span class="math"&gt;\(T\)&lt;/span&gt; and &lt;span class="math"&gt;\(F\)&lt;/span&gt; is &lt;span class="math"&gt;\(F\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;The same can be shows for the rest also.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;New posts should be up &lt;em&gt;not-so-shortly&lt;/em&gt;. In that I will explore each aspect of Lambda Calculus in more detail.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="CS"></category></entry><entry><title>FSMK Winter Camp, Hassan</title><link href="https://signalshore.github.io/blog/FSMK-Winter-Camp.html" rel="alternate"></link><published>2018-02-16T00:00:00+05:30</published><updated>2018-02-16T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-02-16:/blog/FSMK-Winter-Camp.html</id><summary type="html">&lt;p&gt;&lt;a href="https://fsmk.org/"&gt;Free Software Movement Karnataka (FSMK)&lt;/a&gt; conducted
a winter camp
at &lt;a href="http://rithassan.org/"&gt;Rajeev Institute of Technology&lt;/a&gt;, Hassan
from 22nd January to 27th January.&lt;/p&gt;
&lt;p&gt;It was a 6 day camp for the the participants with 2 days dedicated to
volunteer training before the camp. In this camp we had three
different areas of …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://fsmk.org/"&gt;Free Software Movement Karnataka (FSMK)&lt;/a&gt; conducted
a winter camp
at &lt;a href="http://rithassan.org/"&gt;Rajeev Institute of Technology&lt;/a&gt;, Hassan
from 22nd January to 27th January.&lt;/p&gt;
&lt;p&gt;It was a 6 day camp for the the participants with 2 days dedicated to
volunteer training before the camp. In this camp we had three
different areas of CS that we were focusing on viz. Web Development
using Ruby on Rails, Android Development and IoT. This camp was
organized by the Hassan level regional glugs of FSMK.&lt;/p&gt;
&lt;p&gt;I volunteered for IoT track because I have no interest in Web
Development and Android Development. Apart from this the main speaker
for the hardware track
was &lt;a href="https://cosmobird.github.io"&gt;Ganesh (cosmobird)&lt;/a&gt;. He has been a
great source of inspiration to me ever since I met him for the first
time in camp 2016. Moreover hardware and electronics are something
that I love to read about but I was never too &lt;em&gt;hands-on&lt;/em&gt; with and I
wanted o remedy that.&lt;/p&gt;
&lt;h2&gt;The IoT track&lt;/h2&gt;
&lt;p&gt;The IoT track was mind-blowing. We were using NodeMCU chips as the
basic hardware for this track. The main syllabus of the track focused
on creating a weather station along with Mesh Networks and Software
Defined Radio. In fact Ganesh and his friends (Niranjan and Mugilan)
gave the participants a live demonstration of Software Defined Radio
with an RTL-SDR chip.&lt;/p&gt;
&lt;p&gt;Fun-Fact: I was given the responsibility (read: volunteered) to
procure some of the hardware for the IoT participant kits that we were
supposed to give to the students. We had ordered 45 Kits. Apart from
getting the equipment it was also my responsibility to check if all
the NodeMCUs were working or not. This was the most fun part of the
whole exercise. I ended up making a temporary production line sort of
thing so as to optimize my testing and packing routine. :-P&lt;/p&gt;
&lt;p&gt;&lt;img alt="Iot" src="/assets/images/2018-02-16/iot.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;Iot team (some are missing, some are extra)&lt;/h6&gt;
&lt;h2&gt;Being a speaker&lt;/h2&gt;
&lt;p&gt;I was a speaker at this camp. This was the most scary part for me. I
had never spoken at such an event before.&lt;/p&gt;
&lt;p&gt;Being a speaker in this camp was admittedly a new, scary and
profoundly educational experience for me. &lt;/p&gt;
&lt;p&gt;My session was the introductory session (the &lt;em&gt;hello-world&lt;/em&gt; into
NodeMCU programming).  The &lt;em&gt;hello-world&lt;/em&gt; involved getting the
participants' laptops to boot with the LIVE OS (Fedora) and then
connecting the NodeMCU and the pushing the first code into it.&lt;/p&gt;
&lt;p&gt;Just to keep things a bit funny and interesting I threw in an arduino
joke.  While introducing the participants about the function
&lt;em&gt;digitalWrite(PIN, MODE)&lt;/em&gt;. I said&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With digitalWrite you can set a specific pin to be either HIGH or sober.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6&gt;did you see what I did there ?? :-P&lt;/h6&gt;
&lt;p&gt;This cracked up all the stoners in the group. &lt;/p&gt;
&lt;p&gt;Being a speaker I realized that I do like teaching and that I am quite
good at it. Even though I was very scared of taking the session I was
surprised when people started to tell me that I was a good speaker and
that they enjoyed my session very much. This gave me a much needed
boost.&lt;/p&gt;
&lt;p&gt;Other than that I was also a volunteer every volunteer was assigned a
group of 5 people. My group was amazing. My group was self-sufficient
in a way, other than any super-complicated issue the group had learnt
to help themselves out. This often meant that someone in the group who
had the problem figured out would help out the rest pf the people. I
am so proud of them. :')&lt;/p&gt;
&lt;h2&gt;Getting out of my comfort zone&lt;/h2&gt;
&lt;p&gt;I DO NOT dance, because I am terrible at it and I do not want to kill
a human being who witnesses that. But, in this camp I did something
that I do no think I would have ever done. During the &lt;em&gt;Ethnic Day&lt;/em&gt; at
camp we had a cultural program and I along with some other friends
went up to the stage during a weird flash-mob kind of scenario and
danced (those who were present will tell you that I was just moving
back and forth with a very low frequency but I call it
dancing. :-P). This was the first time I did something like this and
it was an interesting experience.&lt;/p&gt;
&lt;h2&gt;The power of the community&lt;/h2&gt;
&lt;p&gt;Sometime during the culturals the power went out in the auditorium
went out during a dance performance by some of the participants. What
happened next was that the entire audience broke out their mobile
phones and switched on their flashlights and pointed it towards the
stage. It was a beautiful moment. It made me realize that as long as
we are united, we can do anything we want to and nothing is
impossible.&lt;/p&gt;
&lt;p&gt;&lt;img alt="lights!!" src="/assets/images/2018-02-16/light.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;People holding up lights!!&lt;/h6&gt;
&lt;h2&gt;Meeting new people&lt;/h2&gt;
&lt;p&gt;Meeting new people is always fun and I really enjoy meeting new
people. This was something that I was actively looking forward to
during this camp.&lt;/p&gt;
&lt;p&gt;Compared to camp 2016 I have grown up a lot; from being a person who
used to be shit-scared of meeting new people I have become this person
who actually enjoys meeting new people and is also a fun person to be
around(I've been told that I should stop the dead-baby jokes though!
:-P).&lt;/p&gt;
&lt;p&gt;In camp I also met two people who said that they liked my blog. This
&lt;strong&gt;was&lt;/strong&gt; so amazing to hear. I gave me such intense happiness to know
that someone actually reads what I like and that they also enjoy it
and have been motivated by it.&lt;/p&gt;
&lt;p&gt;I also met Nithin who is also into the same topics of CS that I am
into viz. Functional Programming, Programming Language Theory and
Category Theory. Me and him, we talked a lot about Functional
Programming and Compiler Designs. Also Nithin is working with a team
that designs a compiler at National Instruments. So, meeting Nithin
was really awesome because I got to meet a real-life compiler
designer.  :-)&lt;/p&gt;
&lt;p&gt;I met a bunch of people from the Open-Hardware
GLUG &lt;a href="geon.fsmk.org"&gt;GEON&lt;/a&gt;. This the Government Engineering College
Glug. I am not too good with the details. However, these people are
really good with hardware and localization. They have done some amazing &lt;a href="https://geongech.wordpress.com/2017/11/15/not-a-days-work/"&gt;work on localization&lt;/a&gt;. &lt;/p&gt;
&lt;p&gt;Since I mentioned localization I think I should mention the work Rizma
and her team did with respect
to &lt;a href="https://gitlab.com/Frogster/Namma-Fedora"&gt;Namma-Fedora&lt;/a&gt;. In this
project they have localized most of the Fedora Xfce Desktop
environment. I have seen it running and its amazing.&lt;/p&gt;
&lt;p&gt;Meeting new people is always inspiring.&lt;/p&gt;
&lt;h2&gt;Food&lt;/h2&gt;
&lt;p&gt;Anyone who knows me knows that I do not care much about food. I am a
flexitarian, which means that I really don't care about the food as
long as it is edible.&lt;/p&gt;
&lt;p&gt;I really enjoy serving food in these community
events and so even in this camp I took up the responsibility of
serving food whenever I could. I like doing this because this means
that I can interact with everyone even if it is for a short time. I
also threw in some weird pleasantries like "happy lunching" and so
on! :-P&lt;/p&gt;
&lt;p&gt;&lt;img alt="people serving breakfast" src="/assets/images/2018-02-16/food.jpg"&gt;&lt;/p&gt;
&lt;h6&gt;People serving breakfast&lt;/h6&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I think I have covered everything that I wanted to. If not I think I
will add/edit something later on.&lt;/p&gt;
&lt;p&gt;Group photo at the end of the camp.
&lt;img alt="group pic" src="/assets/images/2018-02-16/group.jpg"&gt;&lt;/p&gt;</content><category term="Misc"></category><category term="Work"></category></entry><entry><title>Scheme - Part 4 - Higher Order Procedures (contd.)</title><link href="https://signalshore.github.io/blog/Scheme-Part-4.html" rel="alternate"></link><published>2018-02-06T00:00:00+05:30</published><updated>2018-02-06T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-02-06:/blog/Scheme-Part-4.html</id><summary type="html">&lt;h4&gt;Recap&lt;/h4&gt;
&lt;p&gt;In the previous post we talked about the first part of what it means to be a Higher-Order Function.&lt;/p&gt;
&lt;p&gt;In this post we will talk about the second part of that idea. And, we will explore Higher-Order functions and First Class Functions/Citizens. &lt;/p&gt;
&lt;h3&gt;Procedures as returned values&lt;/h3&gt;
&lt;p&gt;In Scheme …&lt;/p&gt;</summary><content type="html">&lt;h4&gt;Recap&lt;/h4&gt;
&lt;p&gt;In the previous post we talked about the first part of what it means to be a Higher-Order Function.&lt;/p&gt;
&lt;p&gt;In this post we will talk about the second part of that idea. And, we will explore Higher-Order functions and First Class Functions/Citizens. &lt;/p&gt;
&lt;h3&gt;Procedures as returned values&lt;/h3&gt;
&lt;p&gt;In Scheme procedures can be returned from other procedures. In the
world of procedures that can manipulate other procedures this is the
other side of the same coin. If we have procedures that can accept
other procedures as arguments; then it makes logical sense to have
procedures that can return other procedures as well. &lt;/p&gt;
&lt;p&gt;In Scheme we can have procedures that return other procedures as their output. This has very interesting effects both from a programming language perspective and a mathematical perspective. &lt;/p&gt;
&lt;p&gt;We will look at them, But before that we need to read a bit of literature.&lt;/p&gt;
&lt;h3&gt;First Class Functions and Higher Order Function&lt;/h3&gt;
&lt;p&gt;The term First Class Functions is used only in a programming language context.&lt;/p&gt;
&lt;p&gt;A programming language supports first class functions if it treats
functions
as
&lt;a href="https://en.wikipedia.org/wiki/First-class_citizen"&gt;first class citizens&lt;/a&gt;. First
class citizens are those entities that supports all the operations
generally available to other entities in that programming
language. These operations typically include being passed as a
variable, being returned from a function, being assigned to a
variable, etc.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;What does this mean for programming languages ?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;This means that for a programming language to support &lt;a href="https://en.wikipedia.org/wiki/First-class_function"&gt;first class functions&lt;/a&gt; it should allow functions to be passed as arguments to other functions, functions to be returned from other functions and functions to be stored in variables or any suitable data-structures.&lt;/p&gt;
&lt;p&gt;It should be noted that First-class function is not an attribute of any function in a language. Rather, it the attribute of the programming language itself.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;What is the deal with Higher-Order Functions ?&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Higher-order_function"&gt;Higher-Order functions&lt;/a&gt; are not limited to programming languages. This concept covers functions in a much more general and mathematical sense. The idea is that Higher-Order Functions accepts other functions as arguments, and can returns functions as results. &lt;/p&gt;
&lt;p&gt;The differential function in mathematics is an example of Higher-Order Function. It accepts a function as its input and returns the derivative of that function which is also a function. &lt;/p&gt;
&lt;div class="math"&gt;$$ d(f(x)) / dx = f'(x)$$&lt;/div&gt;
&lt;p&gt;In this equation the differential operator accepts the function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; as an argument and the result of the operation is &lt;span class="math"&gt;\(f'(x)\)&lt;/span&gt;. &lt;/p&gt;
&lt;p&gt;From a programming language perspective we can see multiple examples of higher order functions. A very common example is the &lt;code&gt;map&lt;/code&gt; function in python.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;lists&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;sqrr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sqrr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lists&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;em&gt;&lt;a href="https://docs.python.org/3.5/library/functions.html#map"&gt;map&lt;/a&gt;&lt;/em&gt; takes a function and a list of elements and it returns a list with the function applied to all the elements of the input list.&lt;/p&gt;
&lt;p&gt;Alright now that we have covered some literature, let's dive in...&lt;/p&gt;
&lt;h3&gt;Let's Dive In&lt;/h3&gt;
&lt;h3&gt;&lt;strong&gt;Lambdas&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Scheme offers a special form that allows us to create procedures. Lambdas in Scheme lets us create anonymous procedures i.e. procedures without any names. This might not seem like a very big and special thing, but this is exactly what gives Scheme (and other similar programming languages)so much power.&lt;/p&gt;
&lt;p&gt;To illustrate this concept we will write some procedures. Recall that procedures in Scheme are written using &lt;code&gt;define&lt;/code&gt;.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;summ-old&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;summ-old&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This same procedure can be written using lambdas like so ...&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;summ&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;summ&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Basically a lambda is used to create procedures the same way define is used, but with lambda no name of the procedure is mentioned. 
The syntax of lambdas is &lt;/p&gt;
&lt;p&gt;&lt;code&gt;(lambda (&amp;lt;formal_parameters) (body))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;These are very useful in cases where we do not require naming a procedure because that procedure will be used only once. 
Such a definition looks like this ..&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;y&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; 
  &lt;span class="mi"&gt;3&lt;/span&gt;
  &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h4&gt;&lt;strong&gt;Returning Procedures&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;In Scheme we can use lambdas to create procedures that return other procedures.&lt;/p&gt;
&lt;p&gt;Let us illustrate this idea with some examples.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;adder&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt;  &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In this example we have a procedure &lt;em&gt;adder&lt;/em&gt; that accepts an argument and returns another procedure (that is what the lambda does) that accepts another parameter and returns the sum of the two numbers.&lt;/p&gt;
&lt;p&gt;We can eliminate the first parameter altogether also. Such a function would look like this&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="nv"&gt;adder-2&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;m&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The procedure &lt;em&gt;adder-2&lt;/em&gt; returns a procedure that accepts an argument and returns another procedure that accepts an argument and returns the sum of these two arguments.&lt;/p&gt;
&lt;p&gt;If all this sounds too complex do not worry! How we go about applying these two procedures to operands should make things a lot clearer.&lt;/p&gt;
&lt;p&gt;For applying &lt;em&gt;adder&lt;/em&gt; the thing that we should keep in mind is that &lt;em&gt;adder&lt;/em&gt;  returns a function that needs an argument. &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adder&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;It is quite easy to see what is going on here. Let us assume that the inner set of parenthesis is evaluated to a procedure &lt;em&gt;f&lt;/em&gt; so after the first set of evaluation the statement should look like this &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;and the resulting output should be 15. &lt;/p&gt;
&lt;p&gt;This is also true for the &lt;em&gt;adder-2&lt;/em&gt; procedure. &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adder-2&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;em&gt;adder-2&lt;/em&gt; procedure returns a procedure that accepts 5 as an argument and then returns a procedure that accepts 10 as an argument.&lt;/p&gt;
&lt;p&gt;This lets us do all sorts of interesting things with these functions. For example we can chain them together to add more than two numbers.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adder&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adder&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adder-2&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="nf"&gt;adder-2&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Both of these procedures return 15.&lt;/p&gt;
&lt;h4&gt;&lt;strong&gt;Some practical uses of lambdas&lt;/strong&gt;&lt;/h4&gt;
&lt;p&gt;Lambdas can be very useful when you need to write a procedure but there is no need to name the procedure. Situations where you will not be calling the procedure suing the name in any scenario whatsoever. &lt;/p&gt;
&lt;p&gt;Personally I have a lambda function written in my Emacs config file that opens my To-Do list everytime I press F6 on my keyboard. I did not write this function; I just copied it from some answer on Stack Overflow, but nevertheless it is a good start.&lt;/p&gt;
&lt;p&gt;This is the function.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;global-set-key&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;kbd&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&amp;lt;f6&amp;gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;lambda&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;interactive&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="nf"&gt;find-file&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;path/to/file.org&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h3&gt;now ...&lt;/h3&gt;
&lt;p&gt;This marks the end of the first chapter of the book. I will continue with more posts when I find something interesting (which should be often :-P).&lt;/p&gt;
&lt;p&gt;Apart from that I have planned to write about Lambda Calculus and that should be up within this month.&lt;/p&gt;
&lt;p&gt;This is my last semester in college so things are a bit hectic, so delays should be expected. &lt;/p&gt;
&lt;p&gt;I went to FSMK camp 2018 last week and I met a couple of my readers. That was fun. :-) (and cheers to you people!!)&lt;/p&gt;
&lt;p&gt;That is it!! (for now)&lt;/p&gt;
&lt;p&gt;p.s. The code for this post can be found &lt;a href="/assets/files/scheme-4.scm"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="CS"></category><category term="Scheme"></category></entry><entry><title>Open Access</title><link href="https://signalshore.github.io/blog/Open-Access.html" rel="alternate"></link><published>2018-02-01T00:00:00+05:30</published><updated>2018-02-01T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-02-01:/blog/Open-Access.html</id><summary type="html">&lt;h2&gt;What is Open Access ?&lt;/h2&gt;
&lt;p&gt;According to &lt;a href="https://en.wikipedia.org/wiki/Open_access"&gt;Wikipedia&lt;/a&gt;
Open access refers to online research outputs that are free of all
restrictions on access (e.g. access tolls) and free of many
restrictions on use. &lt;/p&gt;
&lt;p&gt;In simple terms Open Access means free information for all. It means
that anyone irrespective of their …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;What is Open Access ?&lt;/h2&gt;
&lt;p&gt;According to &lt;a href="https://en.wikipedia.org/wiki/Open_access"&gt;Wikipedia&lt;/a&gt;
Open access refers to online research outputs that are free of all
restrictions on access (e.g. access tolls) and free of many
restrictions on use. &lt;/p&gt;
&lt;p&gt;In simple terms Open Access means free information for all. It means
that anyone irrespective of their circumstances can have access to
knowledge in the form of high quality peer-reviewed research papers.&lt;/p&gt;
&lt;p&gt;I think that scientific research should be in the public domain, that
anyone should be able to look up the results of any scientific
research they want to. Scientific research is not meant to be locked
up, it is meant to be free. Locking up scientific research only serves
the financial interests of the organizations that benefit from their sales.&lt;/p&gt;
&lt;h2&gt;Why it matters ?&lt;/h2&gt;
&lt;p&gt;It matters because information should be free for all. It should not
come with prerequisite conditions for access (which in this case
happens to be money). Also in this system it is the financially weak
who are denied the access to information. Is that the kind of world we
are building ? A world where information belongs to those who can
afford to pay for it. Personally I am not okay with that kind of a
system.&lt;/p&gt;
&lt;p&gt;There have been people better than myself who have laid the
foundations. I will point in their direction and hope that someone
reading this blog will be enlightened.&lt;/p&gt;
&lt;p&gt;How about we read two such brilliant pieces by them...&lt;/p&gt;
&lt;h1&gt;1. &lt;a href="https://en.wikisource.org/wiki/Guerilla_Open_Access_Manifesto"&gt;The Guerilla Open Access Manifesto&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Information is power. But like all power, there are those who want to keep it for themselves. The world's entire scientific and cultural heritage, published over centuries in books and journals, is increasingly being digitized and locked up by a handful of private corporations. Want to read the papers featuring the most famous results of the sciences? You'll need to send enormous amounts to publishers like Reed Elsevier.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There are those struggling to change this. The Open Access Movement has fought valiantly to ensure that scientists do not sign their copyrights away but instead ensure their work is published on the Internet, under terms that allow anyone to access it. But even under the best scenarios, their work will only apply to things published in the future. Everything up until now will have been lost.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;That is too high a price to pay. Forcing academics to pay money to read the work of their colleagues? Scanning entire libraries but only allowing the folks at Google to read them? Providing scientific articles to those at elite universities in the First World, but not to children in the Global South? It's outrageous and unacceptable.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"I agree," many say, "but what can we do? The companies hold the copyrights, they make enormous amounts of money by charging for access, and it's perfectly legal — there's nothing we can do to stop them." But there is something we can, something that's already being done: we can fight back.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Those with access to these resources — students, librarians, scientists — you have been given a privilege. You get to feed at this banquet of knowledge while the rest of the world is locked out. But you need not — indeed, morally, you cannot — keep this privilege for yourselves. You have a duty to share it with the world. And you have: trading passwords with colleagues, filling download requests for friends.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Meanwhile, those who have been locked out are not standing idly by. You have been sneaking through holes and climbing over fences, liberating the information locked up by the publishers and sharing them with your friends.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;But all of this action goes on in the dark, hidden underground. It's called stealing or piracy, as if sharing a wealth of knowledge were the moral equivalent of plundering a ship and murdering its crew. But sharing isn't immoral — it's a moral imperative. Only those blinded by greed would refuse to let a friend make a copy.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Large corporations, of course, are blinded by greed. The laws under which they operate require it — their shareholders would revolt at anything less. And the politicians they have bought off back them, passing laws giving them the exclusive power to decide who can make copies.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There is no justice in following unjust laws. It's time to come into the light and, in the grand tradition of civil disobedience, declare our opposition to this private theft of public culture.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We need to take information, wherever it is stored, make our copies and share them with the world. We need to take stuff that's out of copyright and add it to the archive. We need to buy secret databases and put them on the Web. We need to download scientific journals and upload them to file sharing networks. We need to fight for Guerilla Open Access.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;With enough of us, around the world, we'll not just send a strong message opposing the privatization of knowledge — we'll make it a thing of the past. Will you join us?&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Aaron Swartz&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;July 2008, Eremo, Italy&lt;/em&gt;&lt;/p&gt;
&lt;h1&gt;2. &lt;a href="http://custodians.online/"&gt;Custodians Online&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;In solidarity with &lt;a href="http://libgen.io/"&gt;Library Genesis&lt;/a&gt; and Sci-Hub.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In Antoine de Saint Exupéry's tale the Little Prince meets a businessman who accumulates stars with the sole purpose of being able to buy more stars. The Little Prince is perplexed. He owns only a flower, which he waters every day. Three volcanoes, which he cleans every week. "It is of some use to my volcanoes, and it is of some use to my flower, that I own them," he says, "but you are of no use to the stars that you own".&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;There are many businessmen who own knowledge today. Consider Elsevier, the largest scholarly publisher, whose 37% profit margin1 stands in sharp contrast to the rising fees, expanding student loan debt and poverty-level wages for adjunct faculty. Elsevier owns some of the largest databases of academic material, which are licensed at prices so scandalously high that even Harvard, the richest university of the global north, has complained that it cannot afford them any longer. Robert Darnton, the past director of Harvard Library, says "We faculty do the research, write the papers, referee papers by other researchers, serve on editorial boards, all of it for free … and then we buy back the results of our labour at outrageous prices."2 For all the work supported by public money benefiting scholarly publishers, particularly the peer review that grounds their legitimacy, journal articles are priced such that they prohibit access to science to many academics - and all non-academics - across the world, and render it a token of privilege.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Elsevier has recently filed a copyright infringement suit in New York against Science Hub and Library Genesis claiming millions of dollars in damages. This has come as a big blow, not just to the administrators of the websites but also to thousands of researchers around the world for whom these sites are the only viable source of academic materials. The social media, mailing lists and IRC channels have been filled with their distress messages, desperately seeking articles and publications.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Even as the New York District Court was delivering its injunction, news came of the entire editorial board of highly-esteemed journal Lingua handing in their collective resignation, citing as their reason the refusal by Elsevier to go open access and give up on the high fees it charges to authors and their academic institutions. As we write these lines, a petition is doing the rounds demanding that Taylor &amp;amp; Francis doesn't shut down Ashgate, a formerly independent humanities publisher that it acquired earlier in 2015. It is threatened to go the way of other small publishers that are being rolled over by the growing monopoly and concentration in the publishing market. These are just some of the signs that the system is broken. It devalues us, authors, editors and readers alike. It parasites on our labor, it thwarts our service to the public, it denies us access.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We have the means and methods to make knowledge accessible to everyone, with no economic barrier to access and at a much lower cost to society. But closed access’s monopoly over academic publishing, its spectacular profits and its central role in the allocation of academic prestige trump the public interest. Commercial publishers effectively impede open access, criminalize us, prosecute our heroes and heroines, and destroy our libraries, again and again. Before Science Hub and Library Genesis there was Library.nu or Gigapedia; before Gigapedia there was textz.com; before textz.com there was little; and before there was little there was nothing. That's what they want: to reduce most of us back to nothing. And they have the full support of the courts and law to do exactly that.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;In Elsevier's case against Sci-Hub and Library Genesis, the judge said: "simply making copyrighted content available for free via a foreign website, disserves the public interest"8. Alexandra Elbakyan's original plea put the stakes much higher: "If Elsevier manages to shut down our projects or force them into the darknet, that will demonstrate an important idea: that the public does not have the right to knowledge."&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We demonstrate daily, and on a massive scale, that the system is broken. We share our writing secretly behind the backs of our publishers, circumvent paywalls to access articles and publications, digitize and upload books to libraries. This is the other side of 37% profit margins: our knowledge commons grows in the fault lines of a broken system. We are all custodians of knowledge, custodians of the same infrastructures that we depend on for producing knowledge, custodians of our fertile but fragile commons. To be a custodian is, de facto, to download, to share, to read, to write, to review, to edit, to digitize, to archive, to maintain libraries, to make them accessible. It is to be of use to, not to make property of, our knowledge commons.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;More than seven years ago Aaron Swartz, who spared no risk in standing up for what we here urge you to stand up for too, wrote: "We need to take information, wherever it is stored, make our copies and share them with the world. We need to take stuff that's out of copyright and add it to the archive. We need to buy secret databases and put them on the Web. We need to download scientific journals and upload them to file sharing networks. We need to fight for Guerilla Open Access. With enough of us, around the world, we'll not just send a strong message opposing the privatization of knowledge — we'll make it a thing of the past. Will you join us?"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;We find ourselves at a decisive moment. This is the time to recognize that the very existence of our massive knowledge commons is an act of collective civil disobedience. It is the time to emerge from hiding and put our names behind this act of resistance. You may feel isolated, but there are many of us. The anger, desperation and fear of losing our library infrastructures, voiced across the internet, tell us that. This is the time for us custodians, being dogs, humans or cyborgs, with our names, nicknames and pseudonyms, to raise our voices.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Share this letter - read it in public - leave it in the printer. Share your writing - digitize a book - upload your files. Don't let our knowledge be crushed. Care for the libraries - care for the metadata - care for the backup. Water the flowers - clean the volcanoes.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;30 November 2015&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Dušan Barok, Josephine Berry, Bodó Balázs, Sean Dockray, Kenneth Goldsmith, Anthony Iles, Lawrence Liang, Sebastian Lütgert, Pauline van Mourik Broekman, Marcell Mars, spideralex, Tomislav Medak, Dubravka Sekulić, Femke Snelting...&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;If you need to download a Scientific Paper; visit &lt;a href="http://sci-hub.hk"&gt;Sci-Hub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you need books, visit &lt;a href="http://bookfi.net"&gt;BookFI&lt;/a&gt; and &lt;a href="http://libgen.io"&gt;libgen&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you come across a book that is not on libgen, digitize it and upload it on libgen.&lt;/p&gt;
&lt;p&gt;Watch the movie &lt;a href="http://www.imdb.com/title/tt3268458/"&gt;The Internet's Own Boy: The Story of Aaron Swartz&lt;/a&gt;. Download it and keep sharing it. &lt;/p&gt;
&lt;p&gt;Read the Open Access Manifesto in University gatherings.&lt;/p&gt;
&lt;p&gt;Spread the love.&lt;/p&gt;
&lt;p&gt;Knowledge should be free.&lt;/p&gt;
&lt;p&gt;Let's keep it that way!!&lt;/p&gt;</content><category term="Activism"></category></entry><entry><title>The Emacs Way</title><link href="https://signalshore.github.io/blog/Emacs.html" rel="alternate"></link><published>2018-01-17T00:00:00+05:30</published><updated>2018-01-17T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-01-17:/blog/Emacs.html</id><summary type="html">&lt;h3&gt;Starting out with Emacs&lt;/h3&gt;
&lt;p&gt;Like any other person who uses Linux I too started out by using vim as
my default text editor. This was a time when I did not know the
amazing world of vim plugins. It was a good journey for a while and
over time my …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Starting out with Emacs&lt;/h3&gt;
&lt;p&gt;Like any other person who uses Linux I too started out by using vim as
my default text editor. This was a time when I did not know the
amazing world of vim plugins. It was a good journey for a while and
over time my vim config grew up to a point where it was the perfect
setup.&lt;/p&gt;
&lt;p&gt;Then, I discovered Emacs and I moved to Emacs. In the previous
sentence using the work "discovered" is wrong because I did not
"discover" it in the strictest sense of the word. I started using
Emacs because someone (this person is an Emacs and Scheme veteran
(actually a LISP)) told me that the best IDE for learning Scheme is to
use Emacs. Over time I found Emacs to be the most perfect piece of
software that you could possibly want.&lt;/p&gt;
&lt;h3&gt;What is Emacs ?&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; is
marketed as a Text Editor which is a huge oversimplification of what
Emacs actually is.&lt;/p&gt;
&lt;p&gt;Let me tell you what Emacs really is. The standard version of Emacs
&lt;em&gt;without&lt;/em&gt; any extra plugins comes with a text-editor, an interpreter
(for Emacs-Lisp), a package manager (for Emacs), a Planner (org-mode),
a Calendar, a File manager, and a mail/news reader all rolled into one
eco-system. At a fundamental level Emacs is an interpreter for
Emacs-Lisp, all of these goodness comes from the awesomeness of LISP
(or eLISP in this case).&lt;/p&gt;
&lt;p&gt;I am unable to form sentences about stuff I wanna say and I really
like lists. So, I will list out stuff and go on explaining them.&lt;/p&gt;
&lt;p&gt;This is a list of the reasons why I like Emacs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Config&lt;/strong&gt; : The Emacs config is just a eLisp script. This enables
  it to be loaded dynamically and the changes also reflect dynamically
  without having to restart the application. A configuration written
  in eLisp means that you do not have to learn some weird brain-dead
  language just to configure a text editor (I'm looking
  at
  &lt;a href="https://en.wikipedia.org/wiki/Vim_(text_editor)#Vim_script"&gt;Vim script&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://en.wikipedia.org/wiki/Literate_programming"&gt;Literate Programming&lt;/a&gt;&lt;/strong&gt; :
  By default the Emacs configuration file &lt;em&gt;init.el&lt;/em&gt; to store the Emacs
  config. This becomes messy as after some time you end up with a
  mess. Thus I decided that it would be a good idea to store the user
  config is a separate file and have Emacs generate the actual
  configuration from it . So I write my config in an Org-mode file and
  I let Emacs handle the
  rest. &lt;a href="https://gitlab.com/83bytes/emacs-config"&gt;This&lt;/a&gt; is where I
  have uploaded my Emacs config. The file &lt;em&gt;init.el&lt;/em&gt; is the default
  Emacs config file. I write my config in the &lt;em&gt;config.org&lt;/em&gt; file and
  Emacs generates the file &lt;em&gt;config.el&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.emacswiki.org/emacs/Evil"&gt;Evil&lt;/a&gt;&lt;/strong&gt; : This mode allows me
  to use vim key-bindings. Thus I did not have to retrain the muscle
  memory to learn Emacs&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://magit.vc/"&gt;Magit&lt;/a&gt;&lt;/strong&gt; : Used to manage git repos. Magit is
  a Git porcelain. It exposes a lot of gits high level functionality
  through a very easy to use interface. The best thing that magit did
  for me was that it got in the habit of staging only certain files or
  sometimes even parts of a file really easily. Also magit logs are so
  much better than git log&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://orgmode.org/"&gt;Org-mode&lt;/a&gt;&lt;/strong&gt; : This mode is just
  phenomenal. It is a mode where Emacs does incredibly amazing things
  with just text files. Before using org-mode I had struggled a lot
  with to-do lists. The first thing that org-mode did for me was to
  remove that problem from my life. After using it for sometime I
  wanted to configure org-mode for myself and it was very easy to do
  so. So at this point I have a configure-able to-do list
  application. But there are other uses more fascinating than the
  to-do list thingy. Org-mode files being just text files are
  incredibly easy to read even if you do not have Emacs. Thus you are
  not dependent on Emacs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Open-ness&lt;/strong&gt; : The documentation part of Emacs is like the Cherry on
  top. Emacs is like the truly Free and Open Source software. Since
  it is written in LISP which is not compiled, we can view every
  source code that is used in Emacs. In-fact most of the plugins that
  are installed are just big elisp files. Thus, technically it is very
  much possible for a user to change the code of Emacs while it is
  running. In-fact this is exactly what we do when we change the config
  file and load it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Documentation&lt;/strong&gt; : Emacs embraces documentation like a boss. With
  Emacs you have complete transparency. Using the help menu you can
  see anything you want about emacs' internals. This includes
  variables that are defined within Emacs, definition/descriptions of
  proceudres (yes!! you can type a procedure name and Emacs would pull
  up the procedure description, if you want then you could visit the
  file where the procedure is defined and change it and the changes
  would be reflected dynamically (you would still have to eval the
  file(s) that you have changed)). Apart from that you can also query
  keybindgins and Emacs will tell you which functions is that key
  bound to. This is particularly very useful when you want to figure
  out what a key-binding is doing (look at the procedure definiton and
  so on!!). IMHO no other editor even comes close to this
  feature. This self-documenting feature was a life saver for me when
  I was starting out with Emacs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Writing Documents&lt;/strong&gt; : I really hate using a word-processor and
  honestly sometimes using LibreOffice is not so much fun. With
  org-mode I can just write a file in org-mode and then export it to
  any desired format. And this export is not a shitty export. Org-Mode
  actually creates a hierarchical index based on the highlights in
  org-mode. Moreover Org-mode can export the three main formats that I
  need the most - odt, pdf, md (the markdown looks beautiful)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Dired&lt;/strong&gt; : The Emacs file manager. Dired is the file manager that
  comes with Emacs. Now how many of you have tried to install a file
  browser in vim because that makes it easier to navigate the source
  code directory ?... Yeah.. Emacs has that built-in. Which means that
  it was much well integrated with the rest of the stuff and also that
  you do not have to put yourself through the agony of installing a
  new plugin&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Package System&lt;/strong&gt; : Emacs has its own package manager and its own
  repositories. This means that installing a new package is as simple
  as 'M-x package-install &lt;RET&gt; package-name &lt;RET&gt;'. Emacs will find
  the package, download it, compile it and do the necessary things on
  its own. Configuring the packages requires some more work but that
  is also taken care of by the configuration system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.emacswiki.org/emacs/Helm"&gt;Helm-mode&lt;/a&gt;&lt;/strong&gt; :  This is  a
  framework  that  enables  you  to  quickly  access  anything  within
  Emacs. This  means that  with its  fuzzy matching,  it can  fish for
  commands even before you have finished typing your command. Thus you
  can look  for Emacs commands and  files very fast. It  uses an async
  library in the back-end that makes it this fast.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;LISP&lt;/strong&gt; : Emacs is the best possible IDE for learning
  LISP. With &lt;a href="http://www.nongnu.org/geiser/"&gt;Geiser&lt;/a&gt; I can now run a
  scheme REPL inside Emacs while I write code and then execute them
  from the file itself. This is just seamless and amazing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.gnu.org/software/emacs/manual/html_node/emacs/Emacs-Server.html"&gt;Server mode&lt;/a&gt;&lt;/strong&gt; :
  Emacs is quite heavy, so it takes some time to startup. This means
  that the typical workflow which I used to have with vim would never
  work here. With vim i would just open a new instance of vim wherever
  I needed it. Vim is small and fast. But with Emacs it doesn't make
  sense to open a new instance of Emacs for editing a new file. The
  solution is to us the Emacs Server Mode. In this mode Emacs runs a
  server daemon and we can use the program 'emacsclient' to connect to
  the server. Emacsclient does not create a new instance of Emacs,
  instead it connects to the Emacs server and merely opens a new frame
  or it sends that file to the already opened frame. After editing the
  file we can close that file and it will be saved normally. Thus now
  I can edit a file from anywhere I want within this system. Also
  editing the desktop entry to Emacs enabled me to add a code snippet
  that will call emacsclient whenever I try to open any text file from
  the File Manager.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Other Cool stuff&lt;/h2&gt;
&lt;p&gt;Here are some other interesting things that you can do with Emacs that
I want to try out.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href="https://github.com/skeeto/elfeed"&gt;elfeed&lt;/a&gt;&lt;/strong&gt; : This is a client
  that reads RSS and ATOM feeds.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;mail client&lt;/strong&gt; : Some of my friends use Emacs as their email client. I
  haven't gotten around to doing it yet.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;EXWM&lt;/strong&gt; : This is a window manager that uses Emacs. Its called Emacs
  Window Manager. I have used it briefly but I have not switched to it
  yet.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Emacs is great! 
Vim is great too. (I also use vim when I am working on a server)&lt;/p&gt;
&lt;p&gt;Emacs is a religion.&lt;/p&gt;</content><category term="CS"></category><category term="Linux"></category></entry><entry><title>New Setup (I moved to Pelican)</title><link href="https://signalshore.github.io/blog/New-Setup.html" rel="alternate"></link><published>2018-01-04T00:00:00+05:30</published><updated>2018-01-04T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2018-01-04:/blog/New-Setup.html</id><summary type="html">&lt;p&gt;Can you spot something new ?&lt;/p&gt;
&lt;p&gt;I decided last week that I wanted to use Pelican for building my blog
instead of Jekyll. I have just switched in the last two days and this
is the first post that I am writing from the Pelican built site.&lt;/p&gt;
&lt;p&gt;There are a lot …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Can you spot something new ?&lt;/p&gt;
&lt;p&gt;I decided last week that I wanted to use Pelican for building my blog
instead of Jekyll. I have just switched in the last two days and this
is the first post that I am writing from the Pelican built site.&lt;/p&gt;
&lt;p&gt;There are a lot of reasons why I switched to &lt;a href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt; from Jekyll.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I want to use GUIX SD as my primary Operating System instead of arch and Jekyll is not available on GUIX SD.&lt;/li&gt;
&lt;li&gt;I am more comfortable with Python rather than Ruby&lt;/li&gt;
&lt;li&gt;Jekyll build time increases as the number of posts increase&lt;/li&gt;
&lt;li&gt;Pelican offers the true &lt;code&gt;themes&lt;/code&gt; experience instead of Jekyll. &lt;/li&gt;
&lt;li&gt;Pelican takes care of a lot of things for me (like atom feed generation, pagination etc)&lt;/li&gt;
&lt;li&gt;Pelican plugins are easier to understand and maintain&lt;/li&gt;
&lt;li&gt;There is no weird &lt;code&gt;bundle ...&lt;/code&gt; mess anywhere. Everything is self contained.&lt;/li&gt;
&lt;li&gt;Pelican is better than Jekyll&lt;/li&gt;
&lt;li&gt;Emacs has a pelican mode (oh yeah!! I use emacs!!)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So this is probably one of the biggest changes that has happened to this blog. 
Apart form this there have been a number of smaller changes to this blog.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I removed the Navigation links from the top of the blog to the bottom&lt;/li&gt;
&lt;li&gt;I have a better footer on this blog than the previous one&lt;/li&gt;
&lt;li&gt;The "publishing a post" workflow is a bit complicated than a Jekyll hosted site&lt;/li&gt;
&lt;li&gt;I also removed some of the Signal and Sohom weirdness from the about page.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So that's about it...&lt;/p&gt;</content><category term="Meta"></category><category term="CS"></category></entry><entry><title>Scheme - Part 3 - Higher Order Procedures (intro)</title><link href="https://signalshore.github.io/blog/Scheme-Part-3.html" rel="alternate"></link><published>2017-12-20T00:00:00+05:30</published><updated>2017-12-20T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-12-20:/blog/Scheme-Part-3.html</id><summary type="html">&lt;h3&gt;Higher Order procedures&lt;/h3&gt;
&lt;p&gt;&lt;s&gt;Lisp is a functional programming language&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;Lisp is a &lt;a href="https://en.wikipedia.org/wiki/Metaprogramming"&gt;Metaprogramming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Actually, I really don't know what Lisp is myself and I'm just trying
to figure it out; so the answer to the question "What programming
paradigm does Lisp fall into ?" will have to wait for some …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Higher Order procedures&lt;/h3&gt;
&lt;p&gt;&lt;s&gt;Lisp is a functional programming language&lt;/s&gt;&lt;/p&gt;
&lt;p&gt;Lisp is a &lt;a href="https://en.wikipedia.org/wiki/Metaprogramming"&gt;Metaprogramming Language&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Actually, I really don't know what Lisp is myself and I'm just trying
to figure it out; so the answer to the question "What programming
paradigm does Lisp fall into ?" will have to wait for some time. I'm
sure that I can quote some website or blog but I want to figure it out
myself. I used to think that Lisp was a functional programming
language but turns out it's not according to the strictest definitions
of functional programming and some other reasons that I do not yet
understand fully.&lt;/p&gt;
&lt;p&gt;It's slow but I'm getting there. :-)&lt;/p&gt;
&lt;p&gt;Anyway for this post we need to know that in Lisp we
have
&lt;a href="https://en.wikipedia.org/wiki/First-class_function"&gt;first class functions&lt;/a&gt;,
which is basically functions being treated
as
&lt;a href="https://en.wikipedia.org/wiki/First-class_citizen"&gt;first class citizens&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In Scheme this is achieved using Higher Order procedures.&lt;/p&gt;
&lt;p&gt;In this post I am using functions and procedures interchangeably
because in this context (lisp) everything is a function and there is
not much difference, however the meanings may vary depending on which
programming language family you are talking about, for example in
Pascal procedures and functions are distance and have different
 meanings. In the book functions refer to mathematical functions and
procedures mean Lisp procedures.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/Higher-order_function"&gt;Wikipedia&lt;/a&gt;
defines higher order functions as something that does at least one of
the following&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Take one or more functions as arguments&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Return a function as its result&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;From the SICP book Page 57 defines higher order procedures as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;procedures that manipulate other procedures&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will look at the first point in this post today. The topics are too
dense for a single post.&lt;/p&gt;
&lt;h3&gt;Procedures as arguments&lt;/h3&gt;
&lt;p&gt;Instead of just jumping right in, allow me to use an example that will
inspire the idea of procedures that take procedures as arguments.&lt;/p&gt;
&lt;p&gt;Let us look at this mathematical expression and write a procedure for it.&lt;/p&gt;
&lt;div class="math"&gt;$$ Sum = 1 + 2 + 3 + 4 + \dots +  \infty $$&lt;/div&gt;
&lt;p&gt;The Lisp procedure to compute this would be like &lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum-integers&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum-integers&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum-integers&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; prints 15&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now let us look at this expression &lt;/p&gt;
&lt;div class="math"&gt;$$ Sum = 1^3 + 2^3 + 3^3 + \dots + \infty $$&lt;/div&gt;
&lt;p&gt;This is a series of the sum of cubes. The procedure would look like this&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum-cubes&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cube&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum-cubes&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;If we observer closely we can see that there is an uncanny similarity
between the two procedures and such a similarity indicates that there
is some abstraction that needs further investigation. If you think
about it, in both the previous examples we are computing the sum of
different terms. If we can capture the idea of &lt;code&gt;summing&lt;/code&gt; in a
procedure then that would give us the required
abstraction. Mathematicians have done this using the &lt;span class="math"&gt;\(\Sigma\)&lt;/span&gt;
notation. The Sigma notation captures the idea of the summation
without knowing what we are summing. Thus the above two expressions
can be rewritten as :&lt;/p&gt;
&lt;div class="math"&gt;$$ \sum_{n=1}^\infty n = 1 + 2 + 3 + \dots + \infty $$&lt;/div&gt;
&lt;p&gt;and &lt;/p&gt;
&lt;div class="math"&gt;$$ \sum_{n=1}^\infty n^3 = 1^3 + 2^3 + 3^3 + \dots + \infty $$&lt;/div&gt;
&lt;p&gt;This lets us capture the idea of summation in the Sigma notation like &lt;/p&gt;
&lt;div class="math"&gt;$$ \sum_{n=a}^b f(n) = f(a) + \dots + f(b) $$&lt;/div&gt;
&lt;p&gt;and we can use that idea to write a procedure; like so..&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="nv"&gt;term&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;term&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="nv"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt; &lt;span class="c1"&gt;;; (next a) updates the a&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;In the above procedure "term" and "next" are procedures too.  Term is
a procedure that computes the value of each term. This procedure is
the Lisp equivalent of the function &lt;span class="math"&gt;\(f(x)\)&lt;/span&gt; in the mathematical
Sigma notation. Next is a procedure that determines how the function
will iterate.&lt;/p&gt;
&lt;p&gt;Thus for &lt;span class="math"&gt;\(\sum_{n=1}^\infty n^3 = 1^3 + 2^3 + 3^3 + \dots + \infty\)&lt;/span&gt;
the Lisp procedure would be&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;cube&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum-cube&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;sum&lt;/span&gt; &lt;span class="nv"&gt;cube&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;;; sum is defined above&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is not the end. We can use this idea to create multiple such abstractions. &lt;/p&gt;
&lt;p&gt;For example the multiplication procedure &lt;span class="math"&gt;\(\coprod_{n=a}^b f(n) = f(a) * \dots * f(b)\)&lt;/span&gt; can be coded like&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt; &lt;span class="nv"&gt;term&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;term&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt; &lt;span class="nv"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;We can use the multiplication abstraction to calculate factorials.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;product&lt;/span&gt; &lt;span class="nv"&gt;identity&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="c1"&gt;;;defined above&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;factorial&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;                  &lt;span class="c1"&gt;;; prints 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Now we can see another uncanny similarity between this procedure and
the summation procedure. Thus we can define another procedure called
the &lt;code&gt;accumulate&lt;/code&gt; and abstract away the idea of summation and
multiplication into two different methods of doing the same thing;
accumulating.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;accumulate&lt;/span&gt; &lt;span class="nv"&gt;combiner&lt;/span&gt; &lt;span class="nv"&gt;null-value&lt;/span&gt; &lt;span class="nv"&gt;term&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nv"&gt;null-value&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;combiner&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;term&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;accumulate&lt;/span&gt; &lt;span class="nv"&gt;combiner&lt;/span&gt; &lt;span class="nv"&gt;null-value&lt;/span&gt; &lt;span class="nv"&gt;term&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;indentity&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;next&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;accumulate&lt;/span&gt; &lt;span class="nv"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="nv"&gt;identity&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; prints 15&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;accumulate&lt;/span&gt; &lt;span class="nv"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;identity&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="nv"&gt;next&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; prints 120&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;The &lt;code&gt;combiner&lt;/code&gt; in the above procedure is a procedure that takes in two inputs and combines them. For addition this is &lt;code&gt;+&lt;/code&gt; and for multiplication this is &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;null-value&lt;/code&gt; is the value to be used when the range runs out. This is same the the value used the &lt;code&gt;(&amp;gt; a b)&lt;/code&gt; evaluates to false.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is the beginning of the chapter in the book that deals with this stuff
&lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book-Z-H-12.html#%_sec_1.3"&gt;Book&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This post turned out to be bigger than I anticipated. In the next post
we will look at procedures returning procedures as the result. &lt;/p&gt;
&lt;p&gt;p.s. this implies that higher order procedures can program programs in
some sense. ;-)&lt;/p&gt;
&lt;p&gt;p.p.s This was mighty amazing. I took about 1 minute
to write the accumulate procedure. I took about 2 weeks to fully
understand the sum procedure. I think I am getting a hang of this
thing!!!&lt;/p&gt;
&lt;script type="text/javascript"&gt;if (!document.getElementById('mathjaxscript_pelican_#%@#$@#')) {
    var align = "center",
        indent = "0em",
        linebreak = "false";

    if (false) {
        align = (screen.width &lt; 768) ? "left" : align;
        indent = (screen.width &lt; 768) ? "0em" : indent;
        linebreak = (screen.width &lt; 768) ? 'true' : linebreak;
    }

    var mathjaxscript = document.createElement('script');
    mathjaxscript.id = 'mathjaxscript_pelican_#%@#$@#';
    mathjaxscript.type = 'text/javascript';
    mathjaxscript.src = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS-MML_HTMLorMML';
    mathjaxscript[(window.opera ? "innerHTML" : "text")] =
        "MathJax.Hub.Config({" +
        "    config: ['MMLorHTML.js']," +
        "    TeX: { extensions: ['AMSmath.js','AMSsymbols.js','noErrors.js','noUndefined.js'], equationNumbers: { autoNumber: 'AMS' } }," +
        "    jax: ['input/TeX','input/MathML','output/HTML-CSS']," +
        "    extensions: ['tex2jax.js','mml2jax.js','MathMenu.js','MathZoom.js']," +
        "    displayAlign: '"+ align +"'," +
        "    displayIndent: '"+ indent +"'," +
        "    showMathMenu: true," +
        "    messageStyle: 'normal'," +
        "    tex2jax: { " +
        "        inlineMath: [ ['\\\\(','\\\\)'] ], " +
        "        displayMath: [ ['$$','$$'] ]," +
        "        processEscapes: true," +
        "        preview: 'TeX'," +
        "    }, " +
        "    'HTML-CSS': { " +
        "        styles: { '.MathJax_Display, .MathJax .mo, .MathJax .mi, .MathJax .mn': {color: 'inherit ! important'} }," +
        "        linebreaks: { automatic: "+ linebreak +", width: '90% container' }," +
        "    }, " +
        "}); " +
        "if ('default' !== 'default') {" +
            "MathJax.Hub.Register.StartupHook('HTML-CSS Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax['HTML-CSS'].FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
            "MathJax.Hub.Register.StartupHook('SVG Jax Ready',function () {" +
                "var VARIANT = MathJax.OutputJax.SVG.FONTDATA.VARIANT;" +
                "VARIANT['normal'].fonts.unshift('MathJax_default');" +
                "VARIANT['bold'].fonts.unshift('MathJax_default-bold');" +
                "VARIANT['italic'].fonts.unshift('MathJax_default-italic');" +
                "VARIANT['-tex-mathit'].fonts.unshift('MathJax_default-italic');" +
            "});" +
        "}";
    (document.body || document.getElementsByTagName('head')[0]).appendChild(mathjaxscript);
}
&lt;/script&gt;</content><category term="CS"></category><category term="Scheme"></category></entry><entry><title>Scheme - Part 2 - Expressions and Evaluations</title><link href="https://signalshore.github.io/blog/Scheme-Part-2.html" rel="alternate"></link><published>2017-11-30T00:00:00+05:30</published><updated>2017-11-30T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-11-30:/blog/Scheme-Part-2.html</id><summary type="html">&lt;h3&gt;S-expressions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/S-expression"&gt;S-expressions&lt;/a&gt; or Sexprs or Symbolic Expressions are used to
represented list like data. This was invented for and popularized by
LISP. Lisp stands for LISt Processing. &lt;/p&gt;
&lt;p&gt;A list looks like this &lt;code&gt;(x y ... z)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A list can be made up of other lists as well. Like so &lt;code&gt;(x (a …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;S-expressions&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://en.wikipedia.org/wiki/S-expression"&gt;S-expressions&lt;/a&gt; or Sexprs or Symbolic Expressions are used to
represented list like data. This was invented for and popularized by
LISP. Lisp stands for LISt Processing. &lt;/p&gt;
&lt;p&gt;A list looks like this &lt;code&gt;(x y ... z)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A list can be made up of other lists as well. Like so &lt;code&gt;(x (a b c) (d e f))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;In Lisp (and any other lisps) every program is a represented as a
list. In-fact this is the one and only style of writing programs in
LISP and this leads to some very interesting properties of lisp
programs.
1. Data and instructions (that work on the data) have similar
   representation within the program structure.
2. You have to pay close attention to evaluation models or how each
   list is evaluated.
3. The whole program can be represented as a tree.&lt;/p&gt;
&lt;h3&gt;Program Structure of Lisp&lt;/h3&gt;
&lt;p&gt;If we look at the structure of a LISP program we will notice that
there is not proper structure to the code other than the usual LIST
structure and everything within that language (from variables to
procedure calls) are represented with the same structure. This is
interesting because this is directly related to the kind of computing
model this language is based on. Lisp is based on a model of computing
called &lt;a href="https://en.wikipedia.org/wiki/Lambda_calculus"&gt;Lambda Calculus&lt;/a&gt;. It was invented by &lt;a href="https://en.wikipedia.org/wiki/Alonzo_Church"&gt;Alonzo Church&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On the other hand procedural and object oriented languages are based
on a model of computing called the &lt;a href="https://en.wikipedia.org/wiki/Turing_machine"&gt;Turing Machine&lt;/a&gt;. In these
languages there is some structure that lets us differentiate between
what is code and what is data, but that is not the case in
Lisp. Infact in Lisp code is treated as data in the form of &lt;a href="https://en.wikipedia.org/wiki/Higher-order_function"&gt;higher
order procedures&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Lisp programs are trees. In other words the lists can be represented
as tree such that
- Every list within a pair of &lt;em&gt;(&lt;/em&gt;  &lt;em&gt;)&lt;/em&gt; is treat as a node in the tree
- The very first element of every list is the first child of that node
  in the tree. This is the operator.
- Every other element of that list is a child of that node and are the
  operators for that operand.&lt;/p&gt;
&lt;p&gt;The tree of the expression &lt;code&gt;(+ 2 3)&lt;/code&gt; will look like this&lt;/p&gt;
&lt;p&gt;&lt;img alt="single tree" src="/assets/images/2017-11-30/single.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A LISP program is very easily parse-able by a computer as Trees do
not need complicated rules for traversal and other operations. In-fact
this sounds almost similar to the parse-tree of a
&lt;a href="https://en.wikipedia.org/wiki/Context-free_grammar"&gt;Context-Free Grammar&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;blue&gt;The Substitution Model&lt;/blue&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;This is probably one of the most simplest models of evaluation. It is
also very powerful. It is also recursive in nature. Let us write a
basic definition of the Evaluator.&lt;/p&gt;
&lt;p&gt;Let the Evaluator be &lt;code&gt;E&lt;/code&gt;. It accepts an expression as input and
evaluates it. Let the expression be &lt;code&gt;expr&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On receiving an expression &lt;em&gt;expr&lt;/em&gt; evaluate the sub-expressions (using
  the same model; so this is a recursive call to &lt;em&gt;&lt;code&gt;E(sub_expr)&lt;/code&gt;&lt;/em&gt; where
  &lt;em&gt;sub_expr&lt;/em&gt; is the sub expression)&lt;/li&gt;
&lt;li&gt;Apply the results of the sub-lists as operands to the operator of this list.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In list the first element of any List is treated as the operator while
the rest are treated as the operands.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; + is the operator and 2, 3, 4 are the operands&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;* &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;;; * is the operator and 2, 3, 4 are the operands&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;&amp;gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;   &lt;span class="c1"&gt;;; &amp;gt; is the operator; this is equivalent to 2 &amp;gt; 3 &lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This also applied for lists that have other lists in them. Let's have
a look!&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;+ &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="nv"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;Let us trace what happens here.  First the evaluator receives the
expression &lt;code&gt;(+ 2 4 (+ 2 2))&lt;/code&gt; and then it evaluates the internal list
first. Which is &lt;code&gt;(+ 2 2)&lt;/code&gt;. This expression evaluates to &lt;code&gt;4&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the tree form this is how the above expression would look&lt;/p&gt;
&lt;p&gt;&lt;img alt="double" src="/assets/images/2017-11-30/double.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Then the evaluator &lt;em&gt;substitutes&lt;/em&gt; that result to the actual expression
before continuing on with the evaluation. So now the expression looks
like this &lt;code&gt;(+ 2 4 4)&lt;/code&gt; and then we get the final answer.&lt;/p&gt;
&lt;h3&gt;Evaluation Strategies&lt;/h3&gt;
&lt;p&gt;Lisp uses an &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Applicative_order"&gt;Eager evaluation&lt;/a&gt; strategy. This is also known as Strict
Evaluation or Applicative evaluation. In this strategy all the
operands are evaluated first before applying them to the function.&lt;/p&gt;
&lt;p&gt;In lisp this is the only structure that we have. So conditional
branching (if-else, case). The if-construct in LISP looks like this.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(if (expression) (expression1) (expression2))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now the &lt;em&gt;if&lt;/em&gt; macro is special because it does not follow the normal
evaluation strategy i.e. all the three expressions &lt;em&gt;expression&lt;/em&gt;,
&lt;em&gt;expression1&lt;/em&gt; and &lt;em&gt;expression2&lt;/em&gt; are not evaluated before the procedure
is applied. In this macro only the first expression (&lt;em&gt;expression&lt;/em&gt;) is
evaluated first and if it evaluates to be true (&lt;em&gt;#t&lt;/em&gt;) then
&lt;em&gt;expression1&lt;/em&gt; will be evaluated. Otherwise &lt;em&gt;expression2&lt;/em&gt; will be
evaluated.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recursive&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;if &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recursive&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recursive&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What happens when we evaluate the last expression ? Nothing
spectacular. We just get the value &lt;code&gt;0&lt;/code&gt; which is what it is supposed to
do. We get this answer only because LISP uses normal order evaluation
(lazy evaluation) for the &lt;em&gt;if&lt;/em&gt; construct. If like the default strategy
it used applicative order evaluation then both the &lt;code&gt;0&lt;/code&gt; and the &lt;code&gt;(recursive
(- x 1))&lt;/code&gt; would be evaluated before calling the procedure and that
would lead to an infinite loop. But the if-constructs uses &lt;a href="https://en.wikipedia.org/wiki/Evaluation_strategy#Non-strict_evaluation"&gt;Normal order&lt;/a&gt; evaluation or non-strict evaluation.&lt;/p&gt;
&lt;p&gt;My next program will illustrate this. For that we will define a
&lt;code&gt;new-if&lt;/code&gt; procedure that will do exactly what &lt;code&gt;if&lt;/code&gt; does.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;new-if&lt;/span&gt; &lt;span class="nv"&gt;predicate&lt;/span&gt; &lt;span class="nv"&gt;exp1&lt;/span&gt; &lt;span class="nv"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;cond &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;predicate&lt;/span&gt; &lt;span class="nv"&gt;exp1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;else &lt;/span&gt;&lt;span class="nv"&gt;exp2&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;This is the &lt;em&gt;new-if&lt;/em&gt; procedure. Let us use this in our previous program.&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;define &lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recursive-new&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;new-if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;= &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recursive-new&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;- &lt;/span&gt;&lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))))&lt;/span&gt;

&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nf"&gt;recursive-new&lt;/span&gt; &lt;span class="nv"&gt;x&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;What happens now ? &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;NOW&lt;/strong&gt; the thing goes into a spectacular infinite loop. That is
because the &lt;em&gt;new-if&lt;/em&gt; procedure will be evaluated using the applicative
order strategy. Thus all the operands will be evaluated before the
&lt;em&gt;new-if&lt;/em&gt; procedure is called; and &lt;em&gt;recursive-new&lt;/em&gt; has a call to
itself. So in the end it all splatters exceptionally well.&lt;/p&gt;
&lt;p&gt;P.S. I have written this post based on my own
experience which is a very very limited one. I do not claim that what
I have just said is the ultimate truth or the &lt;em&gt;only&lt;/em&gt; thing out
there. My short life and my shorter experience with LISP is not nearly
enough to cover the full depth and breadth of LISP&lt;/p&gt;</content><category term="CS"></category><category term="Scheme"></category></entry><entry><title>Scheme - Part 1 - Wishful Thinking and Abstraction</title><link href="https://signalshore.github.io/blog/Scheme-Part-1.html" rel="alternate"></link><published>2017-11-20T00:00:00+05:30</published><updated>2017-11-20T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-11-20:/blog/Scheme-Part-1.html</id><summary type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I started
learning
&lt;a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)"&gt;LISP&lt;/a&gt;
(actually a dialect of LISP
called
&lt;a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)"&gt;Scheme&lt;/a&gt;)
sometime back. The inspiration for learning Scheme was that it is
a completely new programming paradigm
i.e. &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;functional programming&lt;/a&gt; language
and I wanted to learn a non-Object-Oriented programming
language. Anyway, so I looked
at
&lt;a href="https://en.wikipedia.org/wiki/Haskell_(programming_language)"&gt;Haskell&lt;/a&gt;
as its …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I started
learning
&lt;a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)"&gt;LISP&lt;/a&gt;
(actually a dialect of LISP
called
&lt;a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)"&gt;Scheme&lt;/a&gt;)
sometime back. The inspiration for learning Scheme was that it is
a completely new programming paradigm
i.e. &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;functional programming&lt;/a&gt; language
and I wanted to learn a non-Object-Oriented programming
language. Anyway, so I looked
at
&lt;a href="https://en.wikipedia.org/wiki/Haskell_(programming_language)"&gt;Haskell&lt;/a&gt;
as its a purely functional programming language, but I picked Scheme
because of the
book
&lt;a href="https://mitpress.mit.edu/sicp/full-text/book/book.html"&gt;Structure and Interpretation of Computer Programs&lt;/a&gt; (referred
to as SICP hereafter).&lt;/p&gt;
&lt;h3&gt;What is this ?&lt;/h3&gt;
&lt;p&gt;Even though I started about 1 year back I did not make much progress
and I realized that one of the main reasons was that I was not doing
the exercises with enough rigor. Thinking about a solution is very
different than writing an actual program. So I decided that I would do
the exercises and put them
on &lt;a href="https://gitlab.com/83bytes"&gt;Gitlab&lt;/a&gt; and then write about
them. Furthermore during this course of learning Scheme I've come
across a lot of cool stuff that completely changed the way how I
approached computer science and programming in general. I want to
share those.&lt;/p&gt;
&lt;h3&gt;Lets start&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Let us write a program&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sum pic" src="/assets/images/2017-11-20/sum.png"&gt;&lt;/p&gt;
&lt;p&gt;(these are cropped screen-shots of Emacs)&lt;/p&gt;
&lt;p&gt;This program takes three numbers and adds them. This is also how the
scheme syntax looks. Scheme syntax is
just &lt;a href="https://en.wikipedia.org/wiki/S-expression"&gt;S-expressions&lt;/a&gt; or
symbolic expressions.&lt;/p&gt;
&lt;p&gt;Thinking about S-expressions is easy. 
- Starting from the first "(" the first element is the operator
- Everything that comes after the first operator are the operands
- The end is the closing bracket ")"&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How about a procedure (scheme word for functions)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;In scheme we use the "define" keyword to define a procedure.&lt;/p&gt;
&lt;p&gt;Its syntax is like this &lt;code&gt;(define (&amp;lt;name&amp;gt; &amp;lt;formal parameters) (&amp;lt;body&amp;gt;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let us define a procedure&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sumProcedure" src="/assets/images/2017-11-20/procedureSum.png"&gt;&lt;/p&gt;
&lt;p&gt;This is how the procedure looks. The name of the procedure is "sum" and it takes in two numbers and produces their sum.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Let us write something a bit complicated&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="sumOfSquare" src="/assets/images/2017-11-20/sumOfSquares.png"&gt;&lt;/p&gt;
&lt;p&gt;This procedure uses the previous "sum" procedure to compute the sum of
the square of two numbers. I this process you should see another
procedure that we have defined which is called "square". This is an
accessory procedure. We could have no used it and it wouldn't have
mattered too much. &lt;/p&gt;
&lt;p&gt;&lt;em&gt;NOW!! here is the kicker! :-P&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Imagine for a second that you did
not know how addition, multiplication, division etc worked. You could
still define the procedure "sumOfSquares" knowing that you have
procedures called "sum" and "square" that will take care of the
internal operations for you.&lt;/p&gt;
&lt;p&gt;What this enables you to do is do a top down design approach to
things.  While designing apps (nothing too big) in C++ I found myself
being too worried about what were all the small parts the should make
up the program, But after starting to read this book apart from
learning scheme I also learned this model of thinking.&lt;/p&gt;
&lt;p&gt;The writers call this "wishful thinking"; as in you wish that
something existed and then used it as if it existed. Then you tried to
figure out if it did exist in the first place or not. If it does exist
then fine; otherwise you design one.&lt;/p&gt;
&lt;p&gt;Which means that if at any point while designing a software you are
un-sure about all sub-modules that will be required to make that
module work then you do not start designing the sub-modules and build
up from there. Instead you design the current module and then design
the sub-modules to match the requirement set up by the module. This is
top-down design approach.&lt;/p&gt;
&lt;p&gt;For example when designing "sumOfSquares" you need not think about how
you will implement it. You can just write the code and then you can
sit down and figure out how "sum" and "square" would work. At the time
of writing the sumOfSquare you do not know if &lt;em&gt;sum&lt;/em&gt; and &lt;em&gt;square&lt;/em&gt;
exist. You just use them as if they did existed.&lt;/p&gt;
&lt;p&gt;This also means that while wiring the sumOfSquare procedure you need
not bother about how &lt;em&gt;sum&lt;/em&gt; and &lt;em&gt;square&lt;/em&gt; will be implemented. You can
just use them as it is.&lt;/p&gt;
&lt;p&gt;This brings me to my next point. &lt;/p&gt;
&lt;h3&gt;Abstraction&lt;/h3&gt;
&lt;p&gt;Every procedure is like a layer of abstraction that is telling you to
not worry about how it works and instead focus on the task at hand.
This idea is immensely helpful. Its so simple. If you don't know how
to do something; just write a procedure that does it; then worry about
the procedure later.&lt;/p&gt;
&lt;p&gt;I didn't think much about this until recently when I started doing
the exercises in the book more seriously. Its great once you get the
hang of it.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;This is not the I have more things to share. Hopefully I will be able
to write about them soon. :-P&lt;/p&gt;
&lt;p&gt;&lt;a href="https://gitlab.com/83bytes/sicp"&gt;Here&lt;/a&gt; is the Gitlab Repo where I will keep uploading my SICP exercises.&lt;/p&gt;</content><category term="CS"></category><category term="Scheme"></category></entry><entry><title>My First 100km Bicycle Ride</title><link href="https://signalshore.github.io/blog/My-First-100-km-Bicycle-Ride.html" rel="alternate"></link><published>2017-11-08T00:00:00+05:30</published><updated>2017-11-08T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-11-08:/blog/My-First-100-km-Bicycle-Ride.html</id><summary type="html">&lt;p&gt;Last Thursday (2 November, 2017) I completed my longest cycling ride
(yet!). It was tiring and awesome at the same time. It took 7 hours to
complete that too with multiple stops in the middle of the ride.&lt;/p&gt;
&lt;h3&gt;The Motivation&lt;/h3&gt;
&lt;p&gt;I've been planning to do a 100k ride for a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Last Thursday (2 November, 2017) I completed my longest cycling ride
(yet!). It was tiring and awesome at the same time. It took 7 hours to
complete that too with multiple stops in the middle of the ride.&lt;/p&gt;
&lt;h3&gt;The Motivation&lt;/h3&gt;
&lt;p&gt;I've been planning to do a 100k ride for a long time but I didn't
really got to it because something or the other always came up and I
was being very very lazy. However a lot of things changed in the last
week and most importantly me and my brother(who also happens to be an
avid bicycling fan based in Kolkata) are planning to go riding when I
visit my hometown in Kolkata. Thus I thought that it would be a good
idea to get some miles under my belt.&lt;/p&gt;
&lt;h3&gt;The Planning&lt;/h3&gt;
&lt;p&gt;This was the easiest part to decide. I was very sure that I did not
want to do a 50 km ride; I wanted something bigger. So i decided to do
a 100+ km ride. The destination was Tumkur because that was the only
town near to Bangalore with a perfect distance for this ride. Tumkur
is 60kms from Bangalore (this distance is from my hostel which happens
to be on the border of Bangalore (so to speak)).&lt;/p&gt;
&lt;p&gt;I could've chosen a route inside Bangalore but I did not do that
because
- Being within the city is like a safety net. There is always the
  possibility of taking an auto and calling it a day.
- Bangalore streets are very shitty to ride on. Its the weird
  combination of the condition of the roads and the multitude of
  moronic motorists.
- Whenever I try something new and bold I like not having any easy
  backup options as I have found that this combination of "no easy
  backups" and "difficult task" are very good and they help me
  grow. :-)&lt;/p&gt;
&lt;p&gt;The road to Tumkur is a National Highway and is very very
straight. Thus there was nothing that could go spectacularly wrong
other than myself getting killed on the Highway. Honestly I think that
the chances of me getting hit by a car and killed is way more in the
city than on the Highway. Also there was no issue of getting lost on
the way and I was very prepared for any punctures and other equipment
related hiccups.&lt;/p&gt;
&lt;h3&gt;The Nutrition&lt;/h3&gt;
&lt;p&gt;I carried peanut brittle because its made of peanuts which is mighty
healthy and it also had jaggery which is a better form of consuming
sucrose as the rate of absorption of sucrose into the body is
regulated in jaggery since it has fiber. So I figured that with each
peanut Brittle I would get a steady and sustainable flow of glucose
(sucrose breaks down into glucose and fructose). (this is not based on
any scientific research. This is just based on what I have learned
about refined and unrefined sugar and 2+2=4 )&lt;/p&gt;
&lt;p&gt;I also had a jam-bread when I reached tumkur. &lt;/p&gt;
&lt;p&gt;I also had a coconut water on the way. It was very very refreshing
especially after sweating and all. I feel that this was very important
as it helped replenish a lot of depleted electrolytes.&lt;/p&gt;
&lt;p&gt;I ate two bananas before starting because I couldn't resist the
temptation. :-P&lt;/p&gt;
&lt;h3&gt;Packing&lt;/h3&gt;
&lt;p&gt;This was a very interesting part where I found myself performing
calculations so that I could carry the most effective load in the most
efficient manner.&lt;/p&gt;
&lt;p&gt;This is one of the most important parts of the trip because without
the correct stuff you might find yourself unprepared for a wide range
of possible situations out on a trip at a location where finding
relevant help would be very difficult.&lt;/p&gt;
&lt;p&gt;You also do not want to carry too much extra stuff because every added
gram means more weight on your shoulders. This is not a big deal but,
when you factor in the fact that I do not have a Pannier rack and I
have to carry all that stuff a shoulder bag it means all that load
will be resting on the small bones on my butt that in turn would rest
on that saddle. Factor in the distance (100km+) and time (6hrs+) of
cycling and you have the perfect recipe for a sore butt.&lt;/p&gt;
&lt;p&gt;I did not carry/wear any jackets since the waste heat from my body
would eventually heat me up.&lt;/p&gt;
&lt;p&gt;Anyway after solving the Linear Programming Problem I found the
optimum carrying requirements
- Food (Peanut Brittle)
- 1.75 Liters of Water (1L + 750ml)
- Tyre repair kit (Patches + Glue + Tyre levers + sand Paper)
- Emergency tools (multi tool + Single Hex Key)
- A spare inner tube (for those un-repairable punctures)
- Portable Pump
- Btwin Saddle Bag
- 2 Bananas (I ate these for breakfast so I don't think I should count them)
- Pen and Notepad
- My Phone
- A cap
- My helmet&lt;/p&gt;
&lt;p&gt;Here is the full inventory laid out for a photo. Note that the tube is
missing because I forgot to keep it
there.  &lt;img alt="Stuff I carried" src="/assets/images/2017-11-08/contents.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I fit a bottle holder on the cycle and put a 1 Liter bottle
there. Also I used an attachment to fix the portable pump onto the
frame of the cycle itself. So in the end I was carrying about 2
Kilograms including the weight of the bag which is not too bad.&lt;/p&gt;
&lt;h3&gt;The TRIP!!!&lt;/h3&gt;
&lt;p&gt;Before this trip I was kinda scared of solo trips; and I would always
go out with Arun on longer rides. But I realized that at some point I
would have to go out myself and I love beign alone so I went on with
it. I was so scared before this ride that I was hoping that Arun would
not be able to let me borrow his backup gear for this ride and so I
would have a reason to cancel it. :-P&lt;/p&gt;
&lt;p&gt;BUT soon the alarm rang at 4 o'clock in the morning and it was time
for me to get going. So I woke up; checked the cycle for any defects,
checked the indexing of the gears, loaded up the gears, dressed up for
the event and Left. :-P I left at 5:30 in the morning which was a mere
half hour behind schedule.&lt;/p&gt;
&lt;p&gt;This is how it looked fully loaded.
&lt;img alt="Fully Loaded" src="/assets/images/2017-11-08/fullyLoaded.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The first leg of the journey was amazing without any hiccups. The
weather was amazing, it was cool and the sun was merciful. I crossed
the "Welcome to Tumkur" sign on the highway at 8:22. So this leg took
exactly 3 hours with two stop in the middle (I stopped to have a
Peanut Brittle and to have coconut water :-P ) which gives me an
average speed of 20 kmph which is not at all bad especially if we
consider the fact this is my first 100km ride and my third long
distance ride in my life (yes!!).&lt;/p&gt;
&lt;p&gt;Here is a pic. :-P
&lt;img alt="Welcome to Tumkur" src="/assets/images/2017-11-08/welcomeToTumkur.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Then I stopped at a bakery to have some jam-bun (white-bread + jam)
which was good decision as I think that this gave me more than enough
energy and also some well-needed rest for my legs. I also refilled my
water bottle. I had used only about 750ml out of the total water that
I was carrying.&lt;/p&gt;
&lt;p&gt;Weird thing. There was a distance marker at Tumkur that said that
Bangalore was 70kms from that point. Here it is.&lt;/p&gt;
&lt;p&gt;&lt;img alt="weird distance marker" src="/assets/images/2017-11-08/signBoard1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This was very unsettling because this was weird, conflicting and new
information. Then it hit me that maybe what is Bangalore and what is
Tumkur is not fixed. Maybe they were measuring Bangalore from that
location to some place that was not where I was measuring Bangalore
to. So i was relieved. :-P&lt;/p&gt;
&lt;p&gt;I started from Tumkur after about 15 mins. This is the part where
things started to get ugly. The weather was bad, it was hot and the
sun was not merciful. I soon realized how tired I was and there was a
slight uphill climb just outside Tumkur (around 10km from
Tumkur). This proved to be a huge challenge. I couldn't do it. So I
ended up pushing the cycle for about 1 km. This was a relief at that
moment. This continued for sometime. I think I stopped and pushed or
stopped and sat down under a tree (btw trees are amazing on a highway
especially on a sunny day) for multiples times. I think I had to push
my cycle about 4 or 5 times. I did not push them too much, maybe just
about 1 km or so. But yeah these were some well needed rests.&lt;/p&gt;
&lt;p&gt;This is a pic when I was resting under a tree. 
&lt;img alt="Random Stop" src="/assets/images/2017-11-08/randomStop.jpg"&gt;&lt;/p&gt;
&lt;p&gt;I reached my hostel at 12:30 which was over 6 hours. I am actually very
surprised that I managed to maintain a decent 20kmps overall. :-P&lt;/p&gt;
&lt;h3&gt;PHOTOS!!!&lt;/h3&gt;
&lt;p&gt;Did I mention that I took photos :-P ? (I absolutely love the camera
in this new phone :-) )&lt;/p&gt;
&lt;p&gt;This was just before starting right in front of my hostel gate.
&lt;img alt="Starting" src="/assets/images/2017-11-08/justStarting.jpg"&gt;&lt;/p&gt;
&lt;p&gt;This was a random location where I stopped
&lt;img alt="random" src="/assets/images/2017-11-08/firstStop.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A random tree with a random hill in the background.
&lt;img alt="random" src="/assets/images/2017-11-08/randomShot1.jpg"&gt;&lt;/p&gt;
&lt;p&gt;A random hill with weird looking clouds
&lt;img alt="random" src="/assets/images/2017-11-08/randomShot2.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The not-random sun behind weird clouds
&lt;img alt="random" src="/assets/images/2017-11-08/randomShot3.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;It was super fun and I think that I will keep on doing this again and
again. Next goal is Mysore. :-P&lt;/p&gt;
&lt;p&gt;I used OsmAnd to record the GPS traces and it was absolutely
phenomenal. I had no idea it would be this amazing.&lt;/p&gt;
&lt;p&gt;Here is what OsmAnd has to say about the trip with Speed (Orange) and
Altitude (Blue) on the same graph. I think we can clearly see the
correlation between the altitude and the speed.&lt;/p&gt;
&lt;p&gt;&lt;img alt="osmand Overall" src="/assets/images/2017-11-08/osmandBoth.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The speed part of the GPX track is also interesting which says my
maximum speed was 46 km/hr which was just for a short while during the
starting phase. I think this was during the descend from my hostel
towards jalahalli via Tumkur Road.&lt;/p&gt;
&lt;p&gt;&lt;img alt="osmand speed" src="/assets/images/2017-11-08/osmandSpeed.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Here is
the
&lt;a href="/assets/files/2017-11-08/2017-11-02_05-39_Thu(100KM).gpx"&gt;GPX track&lt;/a&gt;
just in case.&lt;/p&gt;
&lt;p&gt;p.s. this was longer than I expected it would be. :-P&lt;/p&gt;</content><category term="Cycling"></category><category term="Travel"></category></entry><entry><title>My First Bicycle</title><link href="https://signalshore.github.io/blog/My-First-Bicycle.html" rel="alternate"></link><published>2017-10-26T00:00:00+05:30</published><updated>2017-10-26T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-10-26:/blog/My-First-Bicycle.html</id><summary type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I have been interested in bicycles for as long as I can remember. For
me they represent the ultimate form of Open Design and practical implications of
physics in a much more feel-able way. &lt;/p&gt;
&lt;p&gt;However I never owned a geared bicycle and ever since I moved to
Bangalore I …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I have been interested in bicycles for as long as I can remember. For
me they represent the ultimate form of Open Design and practical implications of
physics in a much more feel-able way. &lt;/p&gt;
&lt;p&gt;However I never owned a geared bicycle and ever since I moved to
Bangalore I wanted to buy one but my parents would not let me buy one
(I was also asking them to buy me one since I am not financially
independent yet!). So after I got the job I saved up enough money to
buy one myself. :-)&lt;/p&gt;
&lt;h3&gt;The Cycle&lt;/h3&gt;
&lt;p&gt;I bought a Schwinn Searcher from a friend of mine. This dude studied
at IISc and he was going home after completing his studies. He had
really cared for this cycle. It is about 5 years old but the
components are really really well maintained. &lt;/p&gt;
&lt;p&gt;Here it is. &lt;img alt="My cycle pic" src="/assets/images/2017-10-26/normal.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Before riding a premium cycle I had no idea that premium bicycles were
this good. The first time I rode a premium bicycle was a btwin
original. I had borrowed this cycle from Arun and we went for a 50k
ride. This was also the first time I rode more than 10k. This was
probably one of the reasons why I decided to buy this one.&lt;/p&gt;
&lt;p&gt;I went on 2 moderate distance rides (around 50k) with Arun. It was
fun. We went to Hesarghatta both times.&lt;/p&gt;
&lt;p&gt;I ride the cycle mostly for commute. I travel to and from college on
this thing.&lt;/p&gt;
&lt;p&gt;Riding in Bangalore is difficult especially with the stop-and-go
traffic. It takes a lot of courage to ride The bicycle in the city. I
still haven't mustered the courage to ride it after sundown. To be
honest I don't have safety lights. (yet) :-P&lt;/p&gt;
&lt;p&gt;I am not riding the cycle as much currently because Bangalore is
having unpredictable and heavy rainfalls. While I do not mind getting
wet in the occasional downpour; I do mind getting my bicycle all wet
and dirty. Its a pain to clean and its not good for the parts.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Riding in the rain with no mudguards is just plain stupid.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The amount of water these tires can fling even on a wet road with no
puddles is just amazing. On top of that the roads here are not too
good so we do have a LOT of puddles. I didn't learn this fact until
it was too late. I was caught off guard with no mud-guards
twice. Thank You Bangalore for such a weird and unpredictable
weather.&lt;/p&gt;
&lt;p&gt;On a positive note I do realize exactly how important mudguards are! :-P&lt;/p&gt;
&lt;h3&gt;Cleaning The Bike&lt;/h3&gt;
&lt;p&gt;One of the best things about owning a bicycle is the mechanical
part. You get to be the cool mechanic and fix any major/minor issues
that crop up. I do enjoy the occasional indexing and lubrication
rituals of the gears. But, after buying this I had never really washed
the bicycle completely. So on a random Sunday I got to it gave the
cycle a complete thorough wash. It was amazing. I opened up the chains
(without any tools; thanks to the master links...) and opened up the
wheels and stuff. It was a great experience.&lt;/p&gt;
&lt;p&gt;I kept the chain out to dry for about 2 days but I had to install it
for a quick ride because of an emergency.&lt;/p&gt;
&lt;p&gt;I was planning to clean the chain using kerosene but that never
happened. It's on my to-do list though!&lt;/p&gt;
&lt;p&gt;Here is a photo of the process. &lt;img alt="Cleaning" src="/assets/images/2017-10-26/clean.jpg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;blue&gt; What is so special about cycling anyway ?  &lt;/blue&gt; &lt;/p&gt;
&lt;p&gt;Even though I can not put a finger on it, I would it is the open-ness
of the whole system that appeals to me at a personal level. As much as
I know myself I would pick a not-so-good but hack-able piece to
technology over a amazing but not hack-able piece of technology on any
fine day. Whats the point of using something if you can not figure
out how it works and tweak it.&lt;/p&gt;
&lt;p&gt;The best thing about bicycles is the open-ness. I think I have used
thus term quite a lot and not explained it. By open-ness I mean that I
can open up the bicycle completely using just a bunch of Allen
Keys. Moreover I can put it back together and it will work just like
before. I can also buy switch random parts and things will still
work. For any repair big or small the only limiting factor is the
availability of relevant tools. If the tools are present then I can
fix almost any foreseeable issue with the bicycle be it a tube puncture
repair or changing the drive-train.&lt;/p&gt;
&lt;p&gt;What I am saying is that a bicycle gives me a sense of
self-sufficiency. Also it has the right mixture of diy-ness that I
find most lacking in people now a days. (:-P)&lt;/p&gt;
&lt;p&gt;Also I am a person knows that Climate Change is real and we need to do as much as we can so that the future is brighter. So it's not a bad feeling to know that every-time I am riding the cycle I am actually making a positive impact in the world. &lt;/p&gt;
&lt;p&gt;I also try to inspire kids/their parents to take cycling seriously because its good for the environment and for the body.&lt;/p&gt;
&lt;p&gt;Last but not the least. Cycling is a great exercise. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Start Cycling; Keep Cycling. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;p.s. I do not click many photos and my phone camera was behaving funny with a custom ROM so the pics can be a bit off! &lt;/p&gt;</content><category term="Cycling"></category></entry><entry><title>The Big Picture</title><link href="https://signalshore.github.io/blog/The-Big-Picture.html" rel="alternate"></link><published>2017-10-07T00:00:00+05:30</published><updated>2017-10-07T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-10-07:/blog/The-Big-Picture.html</id><summary type="html">&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This post is the result of a train of thought that was triggered by an
interaction with a human being who is very close to me.&lt;/p&gt;
&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;So this person recently got into a really cool training program in a
cutting edge scientific field that is conducted by a …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This post is the result of a train of thought that was triggered by an
interaction with a human being who is very close to me.&lt;/p&gt;
&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;So this person recently got into a really cool training program in a
cutting edge scientific field that is conducted by a very reputed
scientific organization.  Now somehow the details about this training
program is not too common, most students have no idea that such a program even
exists.&lt;/p&gt;
&lt;p&gt;So I ask this guy that who else applied along with him from his
college, to which he replied that he didn't know and he did not tell
his friends about the opportunity because that would increase the
competition and lower his chances of getting into the program.&lt;/p&gt;
&lt;h3&gt;Okay! So now what ?!&lt;/h3&gt;
&lt;p&gt;So I have a huge problem with the last statement and that train of
thought in general. I don't think that that type of thinking has any
place in the House of God (or the Temple of Science).&lt;/p&gt;
&lt;p&gt;I believe that science is carried forward by people who recognize that
no-matter what; if you are not good enough, you simply are not good
enough. There is no second thought about it.&lt;/p&gt;
&lt;p&gt;Let me clarify further.&lt;/p&gt;
&lt;p&gt;What does an &lt;em&gt;ideal&lt;/em&gt; scientist do when he/she realizes that her theory
is wrong ?  Do they get defensive about it or do they try to come up
with a theory that is not wrong ?&lt;/p&gt;
&lt;p&gt;My point is scientists recognize their short-comings and take
constructive steps to remedy that. Not the other way around where you
get ahead of others by eliminating the competition. In science
competition is healthy. Just look at the world and you will find
devastating examples of what happens when competition is not there.&lt;/p&gt;
&lt;p&gt;And not just scientists; I think every &lt;em&gt;healthy&lt;/em&gt; adult should practice
this form of thinking because this form of thinking takes the focus
off of the thing which one can not control which in this case is
whether they will get into the program or not and moves the focus to
the thing that they can indeed control which is the amount of effort
they put into developing their skills so that they may get into the
program.&lt;/p&gt;
&lt;p&gt;In less words it moves the focus from external factors that are not
under your control and lets the person focus on themselves so that
there is more room for personal development. If there is no more room
for personal development then we have already lost the battle. :-P&lt;/p&gt;
&lt;p&gt;While sabotaging the competition may seem like a great thing to do; it
is mostly a very un-sustainable thing to do. You may win the battle
but you will lose the war.&lt;/p&gt;
&lt;h3&gt;For the love of science!!&lt;/h3&gt;
&lt;p&gt;I love science. I love science to a fault. I am willing to do anything
in the interest of science.  I can confidently say that if I were in a
situation where I had to choose between myself and another person for
a scientific position of critical importance, I would choose the
better person out of the two of us.&lt;/p&gt;
&lt;p&gt;Given a specific job, I would rather have the best possible person for
the job, do the job rather than myself do the job if I am not
qualified enough for the job. This might look like a passive stance
but this kind of thinking means that in most cases I work really hard
to make sure that when the time comes I am the best possible person to
do a job.&lt;/p&gt;
&lt;p&gt;The reason for all of this is that there is a bigger picture to all of
this than just who gets to do the job. That is the progress of the
scientific community. It doesn't matter who does the job as long as the
job gets done with the best possible quality. &lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;So what I am trying to say is this; If you are incompetent; then you
are incompetent and your level of competency does not depend on your
opponents competency.&lt;/p&gt;
&lt;p&gt;Work on yourself and let the rest sort itself out. :-)&lt;/p&gt;</content><category term="Meta"></category></entry><entry><title>First Job at Azim Premji Foundation</title><link href="https://signalshore.github.io/blog/My-First-Job-at-Azim-Premji-Foundation.html" rel="alternate"></link><published>2017-09-20T00:00:00+05:30</published><updated>2017-09-20T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-09-20:/blog/My-First-Job-at-Azim-Premji-Foundation.html</id><summary type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I got my first job on 14th April 2017. The company was Azim Premji
Foundation and my official role was that of a Technical Consultant. In
this I was to train the content-development team on the Ins and Outs
of Linux and be a guide on their whole learning …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I got my first job on 14th April 2017. The company was Azim Premji
Foundation and my official role was that of a Technical Consultant. In
this I was to train the content-development team on the Ins and Outs
of Linux and be a guide on their whole learning process. It was quite
an educative experience. The contract ended on 14th
September 2017. But I can still visit the office and work on random
stuff (yes! the manager is really cool!!) =P&lt;/p&gt;
&lt;p&gt;Now that this thing has ended I think I am in a decent-ish position to
evaluate it. Honestly speaking I had no idea that my first job would
be something like as meaningful (to me) as this one. I think I am
lucky than most people because I got to work with technology that I
love and I got to do things that I love as well (I have a small crush
on teaching; mostly because I have had bad teachers and think we need
to fix that!!) and on top of that; my job required me to learn more
and more about Linux and to push the boundary. That is like icing on
the cake.&lt;/p&gt;
&lt;p&gt;This job shattered all the preconceived notions I had about jobs and how things worked and about "making an impact".&lt;/p&gt;
&lt;h3&gt;Making an impact&lt;/h3&gt;
&lt;p&gt;I used to be very short-sighted about the "impact" of a job. I always
thought that "impact" is something that you can see from day 1. After
working for 6 months I realized that it is rarely the case. I learned
that good things take time and most of the time this time is because
there are lots of situations that can arise in the middle; issues that
were not thought off before. Also when you are working with other
people then its very easy to get lost in the complexities of life and
work. But this does not mean the all the small things do not matter;
it's just that these things take time.&lt;/p&gt;
&lt;h3&gt;Teachers and Learning&lt;/h3&gt;
&lt;p&gt;Learning can be an intimidating task for anyone and mostly because
learning something absolutely new can make you feel incompetent and
that is not a good feeling. On top of that learning something new
takes a considerable amount of mental energy and time.&lt;/p&gt;
&lt;p&gt;That being said I do not find any difficulty in learning something
absolutely new (this is only the case if I am learning something that
I want to learn); but what surprised me was that even though the
teachers I worked with were very dedicated to the cause but still they
had difficulty getting used to the learning mentality. This used to
bother me at times initially but then I had a breakthrough.&lt;/p&gt;
&lt;p&gt;I am 20 years old now and I would say that I am pretty lucky since I
have a lot less things to worry about than most people. But the people
I worked with are not so lucky. What I was not accounting for is the
fact that they are not as free as I am. I was judging them based from
a very narrow perspective and not accounting for the fact that they
were more than just people with a job. They have families to take care
of of, jobs to worry about and hundreds of other things that need
their immediate attention.  So expecting that they would be "perfect
learners" was an unwise thing to do. Thus even though the team was a
very motivated team; they have every right to feel unmotivated from
time to time.&lt;/p&gt;
&lt;p&gt;I always had a personal grudge against teachers mostly because I had
seen teachers who were not too up to date with the current material
and teachers who did not inspire curiosity and teachers who would
rather say the wrong thing than accept that they do not know
something. I always thought that managers were evil mostly because how
my friends (who were working) always complained about how their
managers were not good and did not know enough about the underlying
system and stuff (I am generalizing here a bit).&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Enter the APF team&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;The group I worked with included three high school teachers and a
Project Manager. The most striking thing about them is their open-ness
to new experience and their humility. This is a bunch of people who
are in their 40s; who are very good at what they do (being teachers)
and who are actively learning new technology that would enhance 
the quality of education for high school students. Let that sink in
for a moment.&lt;/p&gt;
&lt;p&gt;We had one person there who not only used GNU/Linux so that she could
create localized materials for her students (in Kannada); she was also
an active contributor the the GeoGebra community. This is the best
manifestation of the FOSS movement. I have been associated with FSMK
for over a year and this is the first time got to experience the real
power of FOSS for someone outside the developer community. I always
failed to grasp the idea that FOSS is about the people and not the
technology completely until this experience. After this realized the
full depth of the idea (I think so). There is also another person who
was teaching himself woodworking, calculus and German just because he
wanted to learn them.&lt;/p&gt;
&lt;p&gt;I am interested in Theoretical Computer Science and that requires some
decent amount of mathematics which is not covered in great detail in
my course. So I planned to take an online course and teach myself the
maths. BUT I never did, I was too scared of finding out that I was too
dumb or too stupid or too late to the party. In the course of these 6
months my interaction with these amazing people inspired me to enroll 
in 4 MOOC while the usual FSMK work and APF work and College course
work (more about this later). I realized that its better to start than
to just wait for the correct time. It is tough to maintain all of
these at the same time (I think I am in-eligible for some of the MOOC
certificates right now; but the certificates are not why I started
taking the MOOC in the first place :-) )&lt;/p&gt;
&lt;h3&gt;Life-skills&lt;/h3&gt;
&lt;p&gt;Let's talk about humility and open-ness. I was under the impression
that I got this job because I was supposed to know GNU/Linux and teach
them that so I was very scared that a scenario might arise where I
would be out of my depth. As a result I spent a lot of time doing some
homework about the stuff that I had planned to cover that day. But I
got hit by a brick when I saw how open these teachers were about not
knowing stuff. I had never witnessed that amount of acknowledgment
from a teacher about their own shortcomings. Now I think that I am a
lot more open about acknowledging my own short-comings as a
person. Furthermore I think that it is a disservice to yourself if you
can not acknowledge your own shortcomings because we can grow as a
person only when we acknowledge that there is more room to grow as a
person in the first place.&lt;/p&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;This section will be very short! =P&lt;/p&gt;
&lt;p&gt;I had no idea that a Linux based OS was so complex. I always knew that
Linux was complex but I assumed that the OS built around would be
simple enough. Nah! not true again!!! I couldn't be more
wrong. Compiling LFS (Linux From Scratch) has been third best thing in this exercise.&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;At the end of these 6 amazing months I think its fair enough to say that
I learned a lot more from them than they learned from me and looking back I had no idea that this exercise would be such an amazing educational experience for me. Being teachers is not easy and I have more respect for teachers now than I did about 6 months ago. Sure there can be good teachers and bad teachers (I hope I was a good one!) but apart from the one-off cases; most of the teachers are amazing.&lt;/p&gt;</content><category term="Misc"></category><category term="Work"></category><category term="Linux"></category></entry><entry><title>Experience with Data Recovery</title><link href="https://signalshore.github.io/blog/Experience-With-Data-Recovery.html" rel="alternate"></link><published>2017-07-20T00:00:00+05:30</published><updated>2017-07-20T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-07-20:/blog/Experience-With-Data-Recovery.html</id><summary type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;We have been planning to set up a backup utility on Sam but somehow we never quite got around to actually doing it. However this week we finally decided to do it. We decided to try out &lt;a href="https://obnam.org/"&gt;Obnam&lt;/a&gt;. Things were going good until we needed to delete a directory …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;We have been planning to set up a backup utility on Sam but somehow we never quite got around to actually doing it. However this week we finally decided to do it. We decided to try out &lt;a href="https://obnam.org/"&gt;Obnam&lt;/a&gt;. Things were going good until we needed to delete a directory.&lt;/p&gt;
&lt;p&gt;Now remember that this directory was local directory and not a system directory unlike how the name suggests. The directory in question is "mnt".
Yes we had set up the dummy directory tree for experimenting with the backup tool and it had a mnt in it. &lt;/p&gt;
&lt;p&gt;So for deleting it Sohom should have typed &lt;code&gt;rm -rf mnt&lt;/code&gt; but he typed &lt;code&gt;rm -rf /mnt&lt;/code&gt;.
Notice the '/' in the command he typed, Yep true story. Completely nuked all the mounted partitions.&lt;/p&gt;
&lt;h3&gt;Some Context&lt;/h3&gt;
&lt;p&gt;Okay we need some context. This is how &lt;code&gt;lsblk&lt;/code&gt; looks on our system (Sam). The important partitions that store all the main data and media (movies and documentaries and Pics) are the &lt;code&gt;/dev/sda4&lt;/code&gt; and &lt;code&gt;/dev/sda5&lt;/code&gt;. As both of them were mounted they both were completely deleted. &lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="/assets/images/2017-07-20/lsblk.png"&gt;&lt;/p&gt;
&lt;h3&gt;Aftermath&lt;/h3&gt;
&lt;p&gt;Okay so what DID we lose ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ALL  work related files ( We keep a work_space directory )&lt;/li&gt;
&lt;li&gt;ALL of our music collection ( this is what keeps us sane )&lt;/li&gt;
&lt;li&gt;ALL of our Pictures that we had saved ( nice memories :'(  )&lt;/li&gt;
&lt;li&gt;ALL of our documents ( amazing PDF files, and books and other stuff )&lt;/li&gt;
&lt;li&gt;ALL of our documentaries and movies.&lt;/li&gt;
&lt;li&gt;All of our MOOC videos that we had saved. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So yeah! EVERYTHING. &lt;/p&gt;
&lt;h3&gt;The Recovery&lt;/h3&gt;
&lt;p&gt;Now this is where we will trace the thinking that enabled us to get back almost all of our data. &lt;/p&gt;
&lt;p&gt;The First thing that we did was to unmount the affected partitions so as stop any data being overwritten on those partitions. This would increase the chances of getting most of our data back.&lt;/p&gt;
&lt;p&gt;Then we downloaded &lt;a href="https://www.cgsecurity.org/wiki/PhotoRec"&gt;PhotoRec&lt;/a&gt; ( in Arch it is packaged with the TestDisk package ). We started PhotoRec form the terminal and followed the steps to select the partition we wanted to recover and also we had to select the partition where the recovered files would be stored. It is recommended that the partition where you store the recovered files and the partition that you want to recover data from be different partitions as this would reduce the chances of the old data being overwritten. &lt;/p&gt;
&lt;p&gt;Now after this you might see something like this. &lt;img alt="PhotoRec working" src="/assets/images/2017-07-20/photorec.png"&gt;.&lt;/p&gt;
&lt;p&gt;This is normal and its perfectly fine to go about doing other stuff that you have to do while PhotoRec "walks" through the file-system and recovers files for you. &lt;/p&gt;
&lt;p&gt;One thing we should remember is that the recovery part is not such a pain! PhotoRec is amazing and does an amazing job. The main pain is actually picking up the files that YOU want from he whole bunch of recovered files. This is because since PhotoRec does not have any method to determine if the deleted files were deleted accidentally or not, it recovers everything that was deleted and not overwritten. Thus we have a LOT of work to do. &lt;/p&gt;
&lt;h3&gt;After the recovery&lt;/h3&gt;
&lt;p&gt;These are some of the things that PhotoRec does after recovering the files.
&lt;em&gt; Stores everything under multiple &lt;code&gt;recup_dir.&amp;lt;integer&amp;gt;&lt;/code&gt; directories. It looks something like this &lt;img alt="recovery ls" src="/assets/images/2017-07-20/reco_ls.png"&gt;
&lt;/em&gt; Every file other than text files are properly named. As in other than text files all other files have their proper extensions. Thus PhotoRec doesn't mix up JPEG and PNG files.
&lt;em&gt; That being said it does mix up text files. As in recovered Java files would sometimes be named as C++ header files and so on.
&lt;/em&gt; PhotoRec also recovers ELF files which are nothing but executable files.&lt;/p&gt;
&lt;p&gt;&lt;blue&gt; How do we go about sorting this mess ?&lt;/blue&gt;
Our first idea was to launch &lt;a href="http://nongnu.org/ranger/"&gt;ranger&lt;/a&gt; and inspect every single directory and delete directories if the contents didn't feel too important. Something like this.
&lt;img alt="manual" src="/assets/images/2017-07-20/manual.png"&gt;
But there was a major flaw with this system. There were a lot of files in those directories and going through each one of them would be a tedious and a very very stupid thing to do. &lt;/p&gt;
&lt;p&gt;So we started making a list of the things that we lost and the things that we wanted to recovered from the mess. We figured that if we could not remember something that we had lost them we probably did not need it in the first place. Thus we figured that the most important stuff in the data directory ware the scripts that we had written for our Arch System. We also realized that we mostly needed text files from this partition recovery so we could delete all the non-text files and thus we started this massive assault on all non essential files. &lt;/p&gt;
&lt;p&gt;Initially we were writing scripts like &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="o"&gt;(&lt;/span&gt;find ./ -name &lt;span class="s2"&gt;&amp;quot;*.jar&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; rm -vf &lt;span class="nv"&gt;$file&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; end&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which worked like a charm. &lt;/p&gt;
&lt;p&gt;Then we figured out the better version of this command i.e.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find ./ -name &lt;span class="s2"&gt;&amp;quot;*.jar&amp;quot;&lt;/span&gt; -delete
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;which does the same thing; finds files with a particular extension (JAR files in this case) and delete them.&lt;/p&gt;
&lt;p&gt;We kept doing this for a huge set of files unless we were left with only text files.&lt;/p&gt;
&lt;p&gt;Now we needed to get all the DOCX files so we did this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="k"&gt;for&lt;/span&gt; file in &lt;span class="o"&gt;(&lt;/span&gt;find ./ -name &lt;span class="s2"&gt;&amp;quot;*.docx&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; cp -c &lt;span class="nv"&gt;$file&lt;/span&gt; ../store&lt;span class="p"&gt;;&lt;/span&gt; end&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now comes the interesting part. Remember those scripts that we wrote. We had a fairly good idea about the contents of those scripts so we could do a recursive grep with those keywords and BOOM! &lt;/p&gt;
&lt;p&gt;This is the first script which had a lot of i3-msg in it.
&lt;img alt="i3-msg" src="/assets/images/2017-07-20/i3-msg.png"&gt;
Similarly we found all the other scripts.&lt;/p&gt;
&lt;h3&gt;The Second Partition&lt;/h3&gt;
&lt;p&gt;This partition posed a different kind of challenge. We wanted to recover all the images that we had. We ran PhotoRec with the option that would only recover only the JPEG files. But even after that we had about 12000+ JPEG files. Moreover inspection with ranger showed that certain files were duplicated. To confirm our assumption we check the MD5 hash of two such files.&lt;/p&gt;
&lt;p&gt;&lt;img alt="duplicate" src="/assets/images/2017-07-20/dupli.png"&gt;&lt;/p&gt;
&lt;p&gt;As you can see both the files have the same MD5 hash and thus they are essentially the same files. So now we needed a script that would sort the duplicate files out.&lt;/p&gt;
&lt;p&gt;We followed the instructions in this article and installed fdupes and let it run amok and remove all the duplicate files we had.&lt;/p&gt;
&lt;p&gt;Also we figured out that there were a lot of files that were 100kb or less. These were thumbnail files we believe. So we did this&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ find ./ -size -100k -delete
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and all of them annoying files were gone. :p&lt;/p&gt;
&lt;h3&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;&lt;blue&gt; So what is the takeaway from all this ? &lt;/blue&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;OFFSITE BACKUPS&lt;/li&gt;
&lt;li&gt;ALWAYS HAVE BACKUPS BEFORE PLAYING WITH IMPORTANT FILES&lt;/li&gt;
&lt;li&gt;PhotoRec is pretty awesome&lt;/li&gt;
&lt;/ul&gt;</content><category term="CS"></category><category term="Linux"></category></entry><entry><title>The Mess Called Kolkata</title><link href="https://signalshore.github.io/blog/The-Mess-called-Kolkata.html" rel="alternate"></link><published>2017-05-14T00:00:00+05:30</published><updated>2017-05-14T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-05-14:/blog/The-Mess-called-Kolkata.html</id><summary type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I live in Bangalore as I am studying in Bangalore. My hometown is Kolkata. I keep visiting Kolkata after every semester break which generally lasts for about 3 weeks. &lt;/p&gt;
&lt;h3&gt;The Decision&lt;/h3&gt;
&lt;p&gt;Coming to Bangalore was not a properly planned decision. Generally moving to a new city for studies is …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Prologue&lt;/h3&gt;
&lt;p&gt;I live in Bangalore as I am studying in Bangalore. My hometown is Kolkata. I keep visiting Kolkata after every semester break which generally lasts for about 3 weeks. &lt;/p&gt;
&lt;h3&gt;The Decision&lt;/h3&gt;
&lt;p&gt;Coming to Bangalore was not a properly planned decision. Generally moving to a new city for studies is an option that everyone has discussed at-least once in their lifetime. But not me. During my higher-secondary schooling the I had never even entertained the idea of moving to another city to study for an under-graduate degree. Planning and coming to Bangalore happened in like 1 month after my CBSE class 12 results. &lt;/p&gt;
&lt;h3&gt;The Blunder&lt;/h3&gt;
&lt;p&gt;During my school days I was always a shut-in and avoided social interactions mostly because I did not like my friends too much to begin with and because I really did not fit into any particular group of friends. So to keep my young self sane I said to myself that I would find a decent friends circle when I would be in college and we all would hang out in and around Kolkata and explore the city and what not.&lt;/p&gt;
&lt;p&gt;So when coming to Bangalore was finalized I felt very happy. I was very very exited. But that excitement was short-lived. &lt;/p&gt;
&lt;h3&gt;The Realization&lt;/h3&gt;
&lt;p&gt;After living in Bangalore I soon realized how much I liked Kolkata; not because I did not like Bangalore but because I did not know Kolkata well enough to begin with. These two cities are very very different and comparing them is like comparing apples to bananas. I also felt extremely saddened by the fact that all those plans I made about exploring kolkata and stuff were just 3000 kilometers away. &lt;/p&gt;
&lt;h3&gt;The Remedy&lt;/h3&gt;
&lt;p&gt;So I decided that every semester break when I go to Kolkata I will trek around the city exploring it. My idea of exploring a city is somewhat different from the conventional idea. I do not follow a guide to the "must-visit" attractions. Rather I pick a place and I walk. I love walking. Walking through a city opens up another dimension to the city (I think this is because since you are slow while walking you can observe more stuff ?!! (maybe idk! ))&lt;/p&gt;
&lt;h3&gt;The Plan&lt;/h3&gt;
&lt;p&gt;The plan is that there is no plan. I will pick up a place and I will borrow a camera and I will walk and then I will write about it and I will post it with the pics. Most of the pics will have some description about the image and what not. This is gonna be Kolkata as I see it. &lt;/p&gt;
&lt;p&gt;Also I may end up using a cycle for my trek but I am not so sure about the cycle. &lt;/p&gt;</content><category term="Travel"></category></entry><entry><title>The Universe and The Reason</title><link href="https://signalshore.github.io/blog/The-Universe-and-the-reason.html" rel="alternate"></link><published>2017-04-10T00:00:00+05:30</published><updated>2017-04-10T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-04-10:/blog/The-Universe-and-the-reason.html</id><summary type="html">&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This essay originated as a series of messages between me and my friend
(you know who you are). After that I took those messages and worked on
this for quite some time to polish then into something presentable.&lt;/p&gt;
&lt;h3&gt;Okay! so ...&lt;/h3&gt;
&lt;p&gt;Humanity always had a special relationship with reason. Reason …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Disclaimer&lt;/h3&gt;
&lt;p&gt;This essay originated as a series of messages between me and my friend
(you know who you are). After that I took those messages and worked on
this for quite some time to polish then into something presentable.&lt;/p&gt;
&lt;h3&gt;Okay! so ...&lt;/h3&gt;
&lt;p&gt;Humanity always had a special relationship with reason. Reason is the
main keyword here. It is reason that ultimately led to all beautiful
inventions and achievements. Since the early days humanity has always
strived to find the reasons that could describe the naturally occurring
phenomenon around them.&lt;/p&gt;
&lt;p&gt;Man was (still is to some extent) a very inquisitive animal. If it
were up to man then he would have had proper reasons for all the
things that he could have had reasons for and he strived to achieve
just that. Reasons that described everything man could think of. He
strived for perfection. This led to a problem. Man did not realize
that some (read: most) answers are not ultimate. They all lead to
further questions that need further answers and the cycle repeats all
over again. Soon enough humanity had more questions than it had
answers for.&lt;/p&gt;
&lt;p&gt;This created a feeling of helpless-ness. Man could not stomach the
fact that he did not have all the answers. Man could not stomach the
fact that he was not in control. Man could not acknowledge the
universe. Man felt helpless and insignificant (as he rightly is). Man
was (still is) a bit &lt;em&gt;too&lt;/em&gt; arrogant. A bit too arrogant for his own
good. Man was/is a bit too fragile to accept the responsibility for
all of his actions. He needs a scapegoat; not only to blame someone in
case anything goes wrong but also someone to take the credit in case
something goes right. This way man can escape accountability for his
actions and blame god for the good and the bad. He needs to believe
in something far bigger, far greater than himself to make him feel a
part of something bigger than himself, to define a sense of purpose
for him.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;THIS&lt;/em&gt; led to the invention of god. GOD was someone who had all the
answers; someone so perfect that he could take all the bashing and all
the accusations of lowly creatures like ourselves and still be
righteous. God was (still is) the perfect scapegoat for man. This is
what messed up the world as we know it.&lt;/p&gt;
&lt;p&gt;We were born a Hindu, raised a Hindu, trained a Hindu until we realized
what we were and we gave up our religion. We are atheists now. &lt;/p&gt;
&lt;p&gt;Giving up our religion was not a great feeling, there was some form of
disconnect. This is when we realized the power of the "believing in
something bigger than our-self" feeling. That feeling is a powerful
feeling; it keeps you sane.&lt;/p&gt;
&lt;p&gt;So what do we believe in ??  &lt;/p&gt;
&lt;p&gt;We believe in the Universe and the Reason. The universe because it is
what is ultimately out there and reason because reason is how we
insignificant beings communicate with the universe. The universe is
the ultimate form of power and grandeur. Nothing can beat its elegance
and majesticity. When compared to the universe, you truly are
insignificant. And that is also a powerful feeling.&lt;/p&gt;</content><category term="Meta"></category></entry><entry><title>The beginning</title><link href="https://signalshore.github.io/blog/The-beginning.html" rel="alternate"></link><published>2017-03-25T00:00:00+05:30</published><updated>2017-03-25T00:00:00+05:30</updated><author><name>Sohom</name></author><id>tag:signalshore.github.io,2017-03-25:/blog/The-beginning.html</id><summary type="html">&lt;h3&gt;Whats the plan&lt;/h3&gt;
&lt;p&gt;The plan is that there is no plan. We have no idea about what we are trying to do here. All we know is that we will be writing about &lt;em&gt;stuff&lt;/em&gt; and then publish them. &lt;/p&gt;
&lt;p&gt;This was planned for a long time and we have really put …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Whats the plan&lt;/h3&gt;
&lt;p&gt;The plan is that there is no plan. We have no idea about what we are trying to do here. All we know is that we will be writing about &lt;em&gt;stuff&lt;/em&gt; and then publish them. &lt;/p&gt;
&lt;p&gt;This was planned for a long time and we have really put in a lot of effort into making this blog (mostly the design part).&lt;/p&gt;
&lt;p&gt;Also since we are learning LISP and like parentheses (&lt;a href="https://github.com/Fuco1/smartparens"&gt;smartparens&lt;/a&gt; in &lt;a href="https://www.gnu.org/software/emacs/"&gt;Emacs&lt;/a&gt; makes you love parentheses!!) we will be using a lot of parentheses. &lt;/p&gt;
&lt;p&gt;We switched from using vim to using Emacs full time. Vim is good; Emacs is just waaay better (we are not kidding; there will be a post on this some time later ;-) )&lt;/p&gt;
&lt;p&gt;&lt;blue&gt; Source of inspiration &lt;/blue&gt;
Just like any other human out there this blog was also inspired by certain individuals out there&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://systemreboot.net"&gt;Arun Issac&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://solariiknight.org"&gt;Anand Issac&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://cosmobird.github.io"&gt;Cosmobird&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content><category term="Meta"></category></entry></feed>